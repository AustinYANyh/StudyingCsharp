<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StreamJsonRpc</name>
    </assembly>
    <members>
        <member name="T:StreamJsonRpc.AwaitExtensions">
            <summary>
            A collection of extension methods to support special awaiters.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.AwaitExtensions.GetAwaiter(System.Threading.SynchronizationContext)">
            <summary>
            Gets an awaiter that switches the caller to execute on the specified <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
            <param name="synchronizationContext">The <see cref="T:System.Threading.SynchronizationContext" /> to switch to.</param>
            <returns>The value to await on.</returns>
        </member>
        <member name="T:StreamJsonRpc.AwaitExtensions.SynchronizationContextAwaiter">
            <summary>
            The awaiter for <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.AwaitExtensions.SynchronizationContextAwaiter.synchronizationContext">
            <summary>
            The <see cref="T:System.Threading.SynchronizationContext" /> to switch the caller's context to.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.AwaitExtensions.SynchronizationContextAwaiter.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.AwaitExtensions.SynchronizationContextAwaiter" /> struct.
            </summary>
            <param name="synchronizationContext">The <see cref="T:System.Threading.SynchronizationContext" /> to switch the caller's context to.</param>
        </member>
        <member name="P:StreamJsonRpc.AwaitExtensions.SynchronizationContextAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the caller is already on the desired context.
            </summary>
            <remarks>
            We always return <c>false</c> because we use this to invoke server methods and we *always* want to
            yield before invoking them, even if this is the default SynchronizationContext that the caller is on.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.AwaitExtensions.SynchronizationContextAwaiter.GetResult">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.AwaitExtensions.SynchronizationContextAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules a continuation on the <see cref="T:System.Threading.SynchronizationContext" /> specified in the constructor.
            </summary>
            <param name="continuation">The delegate to execute on the <see cref="T:System.Threading.SynchronizationContext" />.</param>
        </member>
        <member name="T:StreamJsonRpc.CommonMethodNameTransforms">
            <summary>
            Common RPC method transform functions that may be supplied to <see cref="M:StreamJsonRpc.JsonRpc.AddLocalRpcTarget(System.Object,StreamJsonRpc.JsonRpcTargetOptions)" />
            by way of <see cref="P:StreamJsonRpc.JsonRpcTargetOptions.MethodNameTransform" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.CommonMethodNameTransforms.CamelCaseStrategy">
            <summary>
            The Newtonsoft.Json camel casing converter.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.CommonMethodNameTransforms.CamelCase">
            <summary>
            Gets a function that converts a given string from PascalCase to camelCase.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.CommonMethodNameTransforms.Prepend(System.String)">
            <summary>
            Gets a function that prepends a particular string in front of any RPC method name.
            </summary>
            <param name="prefix">
            The prefix to prepend to any method name.
            This value must not be null.
            When this value is the empty string, no transformation is performed by the returned function.
            </param>
            <returns>The transform function.</returns>
        </member>
        <member name="T:StreamJsonRpc.DisconnectedReason">
            <summary>
            Identifies a reason for a stream disconnection.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.DisconnectedReason.StreamError">
            <summary>
            An error occurred while accessing the stream.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.DisconnectedReason.ParseError">
            <summary>
            A syntax or schema error while reading a JSON-RPC packet occurred.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.DisconnectedReason.LocallyDisposed">
            <summary>
            The <see cref="T:StreamJsonRpc.JsonRpc" /> instance was disposed.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.DisconnectedReason.RemotePartyTerminated">
            <summary>
            The underlying transport was closed by the remote party.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.DisconnectedReason.FatalException">
            <summary>
            A fatal exception was thrown in a local method that was requested by the remote party.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.DisconnectedReason.LocalContractViolation">
            <summary>
            An extensibility point was leveraged locally and broke the contract.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcDisconnectedEventArgs">
            <summary>
            Describes the reason behind a disconnection with the remote party.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:StreamJsonRpc.JsonRpcDisconnectedEventArgs.#ctor(System.String,StreamJsonRpc.DisconnectedReason)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpcDisconnectedEventArgs" /> class.
            </summary>
            <param name="description">The description.</param>
            <param name="reason">The reason for disconnection.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcDisconnectedEventArgs.#ctor(System.String,StreamJsonRpc.DisconnectedReason,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpcDisconnectedEventArgs" /> class.
            </summary>
            <param name="description">The description.</param>
            <param name="reason">The reason for disconnection.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcDisconnectedEventArgs.#ctor(System.String,StreamJsonRpc.DisconnectedReason,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpcDisconnectedEventArgs" /> class.
            </summary>
            <param name="description">The description.</param>
            <param name="reason">The reason for disconnection.</param>
            <param name="lastMessage">The last message.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcDisconnectedEventArgs.#ctor(System.String,StreamJsonRpc.DisconnectedReason,Newtonsoft.Json.Linq.JToken,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpcDisconnectedEventArgs" /> class.
            </summary>
            <param name="description">The description.</param>
            <param name="reason">The reason for disconnection.</param>
            <param name="lastMessage">The last message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcDisconnectedEventArgs.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcDisconnectedEventArgs.Reason">
            <summary>
            Gets the reason.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcDisconnectedEventArgs.LastMessage">
            <summary>
            Gets the last message.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcDisconnectedEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.BadRpcHeaderException">
            <summary>
            An exception thrown when a deserialized message has a bad header.
            </summary>
            <seealso cref="T:StreamJsonRpc.RemoteRpcException" />
        </member>
        <member name="M:StreamJsonRpc.BadRpcHeaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.BadRpcHeaderException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StreamJsonRpc.BadRpcHeaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.BadRpcHeaderException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:StreamJsonRpc.BadRpcHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.BadRpcHeaderException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:StreamJsonRpc.ConnectionLostException">
            <summary>
            An exception used to fault a <see cref="T:System.Threading.Tasks.Task" /> returned from a <see cref="T:StreamJsonRpc.JsonRpc" /> request
            when the request could not be completed or the response cannot be received because the connection dropped.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.ConnectionLostException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.ConnectionLostException" /> class.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.ConnectionLostException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.ConnectionLostException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:StreamJsonRpc.ConnectionLostException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.ConnectionLostException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:StreamJsonRpc.ConnectionLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.ConnectionLostException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:StreamJsonRpc.LocalRpcException">
            <summary>
            An exception that may be thrown within a locally invoked server method, and carries with it data that influences the JSON-RPC error message's error object.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.LocalRpcException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.LocalRpcException" /> class.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.LocalRpcException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.LocalRpcException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:StreamJsonRpc.LocalRpcException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.LocalRpcException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:StreamJsonRpc.LocalRpcException.ErrorData">
            <summary>
            Gets or sets the value for the error.data property.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.LocalRpcException.ErrorCode">
            <summary>
            Gets or sets the value for the error.code property.
            </summary>
            <remarks>
            The default value is set to a special general error code: <see cref="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.InvocationError" />.
            This may be set to a more meaningful error code for the application that allows the client to programatically respond to the error condition.
            Application-defined values should avoid the [-32768, -32000] range, which is reserved for the JSON-RPC protocol itself.
            </remarks>
        </member>
        <member name="T:StreamJsonRpc.RemoteInvocationException">
            <summary>
            Remote RPC exception that indicates that the server target method threw an exception.
            </summary>
            <remarks>
            The details of the target method exception can be found on the <see cref="P:StreamJsonRpc.RemoteInvocationException.ErrorCode" /> and <see cref="P:StreamJsonRpc.RemoteInvocationException.ErrorData" /> properties.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.RemoteInvocationException.#ctor(System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteInvocationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The value of the error.code field in the response.</param>
            <param name="errorData">The value of the error.data field in the response.</param>
        </member>
        <member name="M:StreamJsonRpc.RemoteInvocationException.#ctor(System.String,System.Int32,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteInvocationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The value of the error.code field in the response.</param>
            <param name="errorData">The value of the error.data field in the response.</param>
            <param name="deserializedErrorData">The value of the error.data field in the response, deserialized according to <see cref="M:StreamJsonRpc.JsonRpc.GetErrorDetailsDataType(StreamJsonRpc.Protocol.JsonRpcError)" />.</param>
        </member>
        <member name="M:StreamJsonRpc.RemoteInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteInvocationException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:StreamJsonRpc.RemoteInvocationException.ErrorCode">
            <summary>
            Gets the value of the <c>error.code</c> field in the response.
            </summary>
            <value>
            The value may be any integer.
            The value may be <see cref="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.InvocationError" />, which is a general value used for exceptions thrown on the server when the server does not give an app-specific error code.
            </value>
        </member>
        <member name="P:StreamJsonRpc.RemoteInvocationException.ErrorData">
            <summary>
            Gets the <c>error.data</c> value in the error response, if one was provided.
            </summary>
            <remarks>
            Depending on the <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> used, the value of this property, if any,
            may be a <see cref="T:Newtonsoft.Json.Linq.JToken" /> or a deserialized object.
            If a deserialized object, the type of this object is determined by <see cref="M:StreamJsonRpc.JsonRpc.GetErrorDetailsDataType(StreamJsonRpc.Protocol.JsonRpcError)" />.
            The default implementation of this method produces a <see cref="T:StreamJsonRpc.Protocol.CommonErrorData" /> object.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.RemoteInvocationException.DeserializedErrorData">
            <summary>
            Gets the <c>error.data</c> value in the error response, if one was provided.
            </summary>
            <remarks>
            The type of this object is determined by <see cref="M:StreamJsonRpc.JsonRpc.GetErrorDetailsDataType(StreamJsonRpc.Protocol.JsonRpcError)" />.
            The default implementation of this method produces a <see cref="T:StreamJsonRpc.Protocol.CommonErrorData" /> object.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.RemoteInvocationException.ToString">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.RemoteInvocationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.RemoteMethodNotFoundException">
            <summary>
            Remote RPC exception that indicates that the requested target method was not found on the server.
            </summary>
            <remarks>
            Check the exception message for the reasons why the method was not found. It's possible that
            there was a method with the matching name, but it was not public, had ref or out params, or
            its arguments were incompatible with the arguments supplied by the client.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.RemoteMethodNotFoundException.#ctor(System.String,System.String,StreamJsonRpc.Protocol.JsonRpcErrorCode,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteMethodNotFoundException" /> class
            with supplied message and target method.
            </summary>
            <param name="message">Exception message describing why the method was not found.</param>
            <param name="targetMethod">Target method that was not found.</param>
            <param name="errorCode">The value of the error.code field in the response.</param>
            <param name="errorData">The value of the error.data field in the response.</param>
            <param name="deserializedErrorData">The value of the error.data field in the response, deserialized according to <see cref="M:StreamJsonRpc.JsonRpc.GetErrorDetailsDataType(StreamJsonRpc.Protocol.JsonRpcError)" />.</param>
        </member>
        <member name="M:StreamJsonRpc.RemoteMethodNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteMethodNotFoundException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:StreamJsonRpc.RemoteMethodNotFoundException.TargetMethod">
            <summary>
            Gets the name of the target method that was not found.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.RemoteMethodNotFoundException.ErrorCode">
            <summary>
            Gets the value of the <c>error.code</c> field in the response.
            </summary>
            <value>
            The value is typically either <see cref="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.InvalidParams" /> or <see cref="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.MethodNotFound" />.
            </value>
        </member>
        <member name="P:StreamJsonRpc.RemoteMethodNotFoundException.ErrorData">
            <summary>
            Gets the <c>error.data</c> value in the error response, if one was provided.
            </summary>
            <remarks>
            Depending on the <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> used, the value of this property, if any,
            may be a <see cref="T:Newtonsoft.Json.Linq.JToken" /> or a deserialized object.
            If a deserialized object, the type of this object is determined by <see cref="M:StreamJsonRpc.JsonRpc.GetErrorDetailsDataType(StreamJsonRpc.Protocol.JsonRpcError)" />.
            The default implementation of this method produces a <see cref="T:StreamJsonRpc.Protocol.CommonErrorData" /> object.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.RemoteMethodNotFoundException.DeserializedErrorData">
            <summary>
            Gets the <c>error.data</c> value in the error response, if one was provided.
            </summary>
            <remarks>
            The type of this object is determined by <see cref="M:StreamJsonRpc.JsonRpc.GetErrorDetailsDataType(StreamJsonRpc.Protocol.JsonRpcError)" />.
            The default implementation of this method produces a <see cref="T:StreamJsonRpc.Protocol.CommonErrorData" /> object.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.RemoteMethodNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.RemoteRpcException">
            <summary>
            Base exception class for any exception that happens while receiving an JSON-RPC communication.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.RemoteRpcException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteRpcException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:StreamJsonRpc.RemoteRpcException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteRpcException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:StreamJsonRpc.RemoteRpcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RemoteRpcException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:StreamJsonRpc.RpcArgumentDeserializationException">
            <summary>
            An exception thrown from <see cref="M:StreamJsonRpc.Protocol.JsonRpcRequest.TryGetArgumentByNameOrIndex(System.String,System.Int32,System.Type,System.Object@)" />
            when the argument cannot be deserialized to the requested type, typically due to an incompatibility or exception thrown from the deserializer.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.RpcArgumentDeserializationException.#ctor(System.String,System.Nullable{System.Int32},System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RpcArgumentDeserializationException" /> class.
            </summary>
            <param name="argumentName">The name of the argument from the JSON-RPC request that failed to deserialize, if available.</param>
            <param name="argumentPosition">The 0-based index of the argument from the JSON-RPC request that failed to deserialize, if available.</param>
            <param name="deserializedType">The <see cref="T:System.Type" /> to which deserialization of the argument was attempted.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:StreamJsonRpc.RpcArgumentDeserializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RpcArgumentDeserializationException" /> class.
            </summary>
            <inheritdoc cref="M:StreamJsonRpc.RpcArgumentDeserializationException.#ctor(System.String,System.Exception)" />
        </member>
        <member name="M:StreamJsonRpc.RpcArgumentDeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RpcArgumentDeserializationException" /> class.
            </summary>
            <inheritdoc cref="M:StreamJsonRpc.RemoteRpcException.#ctor(System.String,System.Exception)" />
        </member>
        <member name="M:StreamJsonRpc.RpcArgumentDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RpcArgumentDeserializationException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="P:StreamJsonRpc.RpcArgumentDeserializationException.ArgumentName">
            <summary>
            Gets the name of the argument from the JSON-RPC request that failed to deserialize, if available.
            </summary>
            <remarks>
            This value will be <c>null</c> when the JSON-RPC request uses positional arguments.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.RpcArgumentDeserializationException.ArgumentPosition">
            <summary>
            Gets the 0-based index of the argument from the JSON-RPC request that failed to deserialize, if available.
            </summary>
            <remarks>
            This value will be <c>null</c> when the JSON-RPC request uses named arguments.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.RpcArgumentDeserializationException.DeserializedType">
            <summary>
            Gets the <see cref="T:System.Type" /> to which deserialization of the argument was attempted.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.RpcArgumentDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.UnrecognizedJsonRpcMessageException">
            <summary>
            An exception thrown when an incoming JSON-RPC message could not be recognized as conforming to any known JSON-RPC message.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.UnrecognizedJsonRpcMessageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.UnrecognizedJsonRpcMessageException" /> class.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.UnrecognizedJsonRpcMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.UnrecognizedJsonRpcMessageException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:StreamJsonRpc.UnrecognizedJsonRpcMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.UnrecognizedJsonRpcMessageException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:StreamJsonRpc.UnrecognizedJsonRpcMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.UnrecognizedJsonRpcMessageException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:StreamJsonRpc.HeaderDelimitedMessageHandler">
            <summary>
            Adds headers before each text message transmitted over a stream.
            </summary>
            <remarks>
            This is based on the language server protocol spec:
            https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md#base-protocol.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.HeaderDelimitedMessageHandler.DefaultContentEncoding">
            <summary>
            The default encoding to use when writing content,
            and to assume as the encoding when reading content
            that doesn't have a header identifying its encoding.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.HeaderDelimitedMessageHandler.HeaderEncoding">
            <summary>
            The encoding to use when writing/reading headers.
            </summary>
            <remarks>
            Although the spec dictates using ASCII encoding, that's equivalent to UTF8
            for the characters we expect to be sending and receiving,
            and portable profiles don't have ASCII available.
            Also note that when writing we use the encoding set by this field,
            but when reading, we have highly optimized code that hard-codes the assumption
            that each character is one byte.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.HeaderDelimitedMessageHandler.contentSequenceBuilder">
            <summary>
            The <see cref="T:System.Buffers.IBufferWriter`1" /> sent to the <see cref="P:StreamJsonRpc.HeaderDelimitedMessageHandler.TextFormatter" /> to write the message.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.HeaderDelimitedMessageHandler.subType">
            <summary>
            Backing field for <see cref="P:StreamJsonRpc.HeaderDelimitedMessageHandler.SubType" />.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.#ctor(System.IO.Pipelines.PipeWriter,System.IO.Pipelines.PipeReader,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> class.
            </summary>
            <param name="writer">The writer to use for transmitting messages.</param>
            <param name="reader">The reader to use for receiving messages.</param>
            <param name="formatter">The formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances.</param>
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.#ctor(System.IO.Pipelines.IDuplexPipe,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> class.
            </summary>
            <param name="pipe">The duplex pipe to use for exchanging messages.</param>
            <param name="formatter">The formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances.</param>
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.#ctor(System.IO.Stream,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> class.
            </summary>
            <param name="duplexStream">The stream to use for exchanging messages.</param>
            <param name="formatter">The formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances.</param>
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> class.
            </summary>
            <param name="duplexStream">The stream to use for transmitting and receiving messages.</param>
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> class.
            </summary>
            <param name="sendingStream">The stream to use for transmitting messages.</param>
            <param name="receivingStream">The stream to use for receiving messages.</param>
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.#ctor(System.IO.Stream,System.IO.Stream,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> class.
            </summary>
            <param name="sendingStream">The stream to use for transmitting messages.</param>
            <param name="receivingStream">The stream to use for receiving messages.</param>
            <param name="formatter">The formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances.</param>
        </member>
        <member name="P:StreamJsonRpc.HeaderDelimitedMessageHandler.SubType">
            <summary>
            Gets or sets the value to use as the subtype in the Content-Type header (e.g. "application/SUBTYPE").
            </summary>
            <value>The default value is "jsonrpc".</value>
        </member>
        <member name="P:StreamJsonRpc.HeaderDelimitedMessageHandler.Encoding">
            <summary>
            Gets or sets the encoding to use for transmitted messages.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if the <see cref="P:StreamJsonRpc.MessageHandlerBase.Formatter" /> in use does not implement <see cref="T:StreamJsonRpc.IJsonRpcMessageTextFormatter" />.</exception>
        </member>
        <member name="P:StreamJsonRpc.HeaderDelimitedMessageHandler.TextFormatter">
            <summary>
            Gets the formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances as text.
            Throws if the formatter is not a text-based formatter.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.ReadCoreAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.Write(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.HeaderDelimitedMessageHandler.ParseEncodingFromContentTypeHeader(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Extracts the content encoding from a Content-Type header.
            </summary>
            <param name="contentTypeValue">The value of the Content-Type header.</param>
            <returns>The Encoding, if the header specified one; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:StreamJsonRpc.IJsonRpcAsyncMessageFormatter">
            <summary>
            An interface that offers <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> serialization to an <see cref="T:System.Buffers.IBufferWriter`1" /> and asynchronous deserialization.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcAsyncMessageFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader,System.Threading.CancellationToken)">
            <summary>
            Deserializes a <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.
            </summary>
            <param name="reader">The reader to deserialize from.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The deserialized <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.</returns>
        </member>
        <member name="T:StreamJsonRpc.IJsonRpcAsyncMessageTextFormatter">
            <summary>
            An interface that offers <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> serialization to an <see cref="T:System.Buffers.IBufferWriter`1" /> and asynchronous deserialization
            and formats messages as JSON (text).
            </summary>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcAsyncMessageTextFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Deserializes a sequence of bytes to a <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.
            </summary>
            <param name="reader">The reader to deserialize from.</param>
            <param name="encoding">The encoding to read the bytes from <paramref name="reader" /> with. Must not be null.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="T:StreamJsonRpc.IJsonRpcClientProxy">
            <summary>
            Implemented by dynamically generated proxies returned from <see cref="M:StreamJsonRpc.JsonRpc.Attach``1(StreamJsonRpc.IJsonRpcMessageHandler,StreamJsonRpc.JsonRpcProxyOptions)" /> and its overloads
            to provide access to additional JSON-RPC functionality.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.IJsonRpcClientProxy.JsonRpc">
            <summary>
            Gets the <see cref="T:StreamJsonRpc.JsonRpc" /> instance behind this proxy.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.IJsonRpcInstanceContainer">
            <summary>
            Interface optionally implemented by <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> implementations that need a reference to their owner <see cref="T:StreamJsonRpc.JsonRpc" /> class.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.IJsonRpcInstanceContainer.Rpc">
            <summary>
            Sets the <see cref="T:StreamJsonRpc.JsonRpc" /> instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">May be thrown when set more than once.</exception>
        </member>
        <member name="T:StreamJsonRpc.IJsonRpcMessageFormatter">
            <summary>
            An interface that offers <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> serialization to and from a sequence of bytes.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcMessageFormatter.Deserialize(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Deserializes a <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.
            </summary>
            <param name="contentBuffer">A sequence of bytes to deserialize.</param>
            <returns>The deserialized <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.</returns>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcMessageFormatter.Serialize(System.Buffers.IBufferWriter{System.Byte},StreamJsonRpc.Protocol.JsonRpcMessage)">
            <summary>
            Serializes a <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.
            </summary>
            <param name="bufferWriter">The receiver of the serialized bytes.</param>
            <param name="message">The message to serialize.</param>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcMessageFormatter.GetJsonText(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <summary>
            Gets a JSON representation for a given message for tracing purposes.
            </summary>
            <param name="message">The message to be traced.</param>
            <returns>Any object whose <see cref="M:System.Object.ToString" /> method will produce a human-readable JSON string, suitable for tracing.</returns>
        </member>
        <member name="T:StreamJsonRpc.IJsonRpcMessageHandler">
            <summary>
            The contract for sending and receiving JSON-RPC messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.IJsonRpcMessageHandler.CanRead">
            <summary>
            Gets a value indicating whether this message handler can receive messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.IJsonRpcMessageHandler.CanWrite">
            <summary>
            Gets a value indicating whether this message handler can send messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.IJsonRpcMessageHandler.Formatter">
            <summary>
            Gets the formatter used for message serialization.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcMessageHandler.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a distinct and complete message from the transport, waiting for one if necessary.
            </summary>
            <param name="cancellationToken">A token to cancel the read request.</param>
            <returns>The received message, or <c>null</c> if the underlying transport ends before beginning another message.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:StreamJsonRpc.IJsonRpcMessageHandler.CanRead" /> returns <c>false</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Thrown if the transport ends while reading a message.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before a new message is received.</exception>
            <remarks>
            Implementations may assume this method is never called before any async result
            from a prior call to this method has completed.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcMessageHandler.WriteAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Writes a JSON-RPC message to the transport and flushes.
            </summary>
            <param name="jsonRpcMessage">The message to write.</param>
            <param name="cancellationToken">A token to cancel the write request.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:StreamJsonRpc.IJsonRpcMessageHandler.CanWrite" /> returns <c>false</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before message transmission begins.</exception>
            <remarks>
            Implementations should expect this method to be invoked concurrently
            and use a queue to preserve message order as they are transmitted one at a time.
            </remarks>
        </member>
        <member name="T:StreamJsonRpc.IJsonRpcMessageTextFormatter">
            <summary>
            An <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> that formats messages as JSON (text).
            </summary>
        </member>
        <member name="P:StreamJsonRpc.IJsonRpcMessageTextFormatter.Encoding">
            <summary>
            Gets or sets the encoding used for serialization for methods that do not take an explicit <see cref="T:System.Text.Encoding" />.
            </summary>
            <value>Never null.</value>
            <exception cref="T:System.ArgumentNullException">Thrown at an attempt to set the value to null.</exception>
        </member>
        <member name="M:StreamJsonRpc.IJsonRpcMessageTextFormatter.Deserialize(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Encoding)">
            <summary>
            Deserializes a sequence of bytes to a <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.
            </summary>
            <param name="contentBuffer">The bytes to deserialize.</param>
            <param name="encoding">The encoding to read the bytes in <paramref name="contentBuffer" /> with. Must not be null.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="T:StreamJsonRpc.JsonMessageFormatter">
            <summary>
            Uses Newtonsoft.Json serialization to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> as JSON (text).
            </summary>
            <remarks>
            Each instance of this class may only be used with a single <see cref="T:StreamJsonRpc.JsonRpc" /> instance.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.ExceptionDataKey">
            <summary>
            The key into an <see cref="P:System.Exception.Data" /> dictionary whose value may be a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that failed deserialization.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.SupportedProtocolVersions">
            <summary>
            A collection of supported protocol versions.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.DefaultEncoding">
            <summary>
            UTF-8 encoding without a preamble.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.JsonCharArrayPool">
            <summary>
            The <see cref="T:System.Char" /> array pool to use for each <see cref="T:Newtonsoft.Json.JsonTextReader" /> instance.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.DefaultSerializer">
            <summary>
            An exactly default instance of the <see cref="P:StreamJsonRpc.JsonMessageFormatter.JsonSerializer" /> to use where no special settings
            are needed.
            </summary>
            <remarks>
            This is useful when calling such APIs as <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)" />
            because <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> allocates a new serializer with each invocation.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.bufferTextWriter">
            <summary>
            The reusable <see cref="T:System.IO.TextWriter" /> to use with newtonsoft.json's serializer.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.sequenceTextReader">
            <summary>
            The reusable <see cref="T:System.IO.TextReader" /> to use with newtonsoft.json's deserializer.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.multiplexingStream">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.JsonMessageFormatter.MultiplexingStream" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.formatterProgressTracker">
            <summary>
            <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker" /> instance containing useful methods to help on the implementation of message formatters.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.duplexPipeTracker">
            <summary>
            The helper for marshaling pipes as RPC method arguments.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.enumerableTracker">
            <summary>
            The helper for marshaling <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> in RPC method arguments or return values.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.serializingMessageWithId">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingMessageWithId" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.deserializingMessageWithId">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.DeserializingMessageWithId" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.serializingRequest">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingRequest" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.observedTransmittedRequestWithStringId">
            <summary>
            A value indicating whether a request where <see cref="P:StreamJsonRpc.Protocol.JsonRpcRequest.RequestId" /> is a <see cref="T:System.String" />
            has been transmitted.
            </summary>
            <remarks>
            This is useful to detect whether <see cref="T:StreamJsonRpc.JsonRpc" /> is operating in its default mode of producing
            integer-based values for <see cref="P:StreamJsonRpc.Protocol.JsonRpcRequest.RequestId" />, which informs us whether we should
            type coerce strings in response messages back to integers to accomodate JSON-RPC servers
            that improperly convert our integers to strings.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.protocolVersion">
            <summary>
            The version of the JSON-RPC protocol being emulated by this instance.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.encoding">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.JsonMessageFormatter.Encoding" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonMessageFormatter.rpc">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.IJsonRpcInstanceContainer.Rpc" /> property.
            </summary>
            <remarks>
            This field is used to create the <see cref="T:System.IProgress`1" /> instance that will send the progress notifications when server reports it.
            The <see cref="P:StreamJsonRpc.IJsonRpcInstanceContainer.Rpc" /> property helps to ensure that only one <see cref="T:StreamJsonRpc.JsonRpc" /> instance is associated with this formatter.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonMessageFormatter" /> class
            that uses JsonProgress (without the preamble) for its text encoding.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonMessageFormatter" /> class.
            </summary>
            <param name="encoding">The encoding to use for the JSON text.</param>
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.Encoding">
            <summary>
            Gets or sets the encoding to use for transmitted messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.ProtocolVersion">
            <summary>
            Gets or sets the version of the JSON-RPC protocol emulated by this instance.
            </summary>
            <value>The default value is 2.0.</value>
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.JsonSerializer">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonSerializer" /> used when serializing and deserializing method arguments and return values.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.MultiplexingStream">
            <summary>
            Gets or sets the <see cref="P:StreamJsonRpc.JsonMessageFormatter.MultiplexingStream" /> that may be used to establish out of band communication (e.g. marshal <see cref="T:System.IO.Pipelines.IDuplexPipe" /> arguments).
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.StreamJsonRpc#IJsonRpcInstanceContainer#Rpc">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.StreamJsonRpc#Reflection#IJsonRpcFormatterState#SerializingMessageWithId">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.StreamJsonRpc#Reflection#IJsonRpcFormatterState#DeserializingMessageWithId">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.StreamJsonRpc#Reflection#IJsonRpcFormatterState#SerializingRequest">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.FormatterProgressTracker">
            <summary>
            Gets the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker" /> instance containing useful methods to help on the implementation of message formatters.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.DuplexPipeTracker">
            <summary>
            Gets the helper for marshaling pipes as RPC method arguments.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonMessageFormatter.EnumerableTracker">
            <summary>
            Gets the helper for marshaling <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> in RPC method arguments or return values.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.Deserialize(System.Buffers.ReadOnlySequence{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.Deserialize(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.Serialize(System.Buffers.IBufferWriter{System.Byte},StreamJsonRpc.Protocol.JsonRpcMessage)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.Deserialize(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Deserializes a <see cref="T:Newtonsoft.Json.Linq.JToken" /> to a <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" />.
            </summary>
            <param name="json">The JSON to deserialize.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.Serialize(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <summary>
            Serializes a <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> to a <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="message">The message to serialize.</param>
            <returns>The JSON of the message.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.GetJsonText(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <inheritdoc />
            <devremarks>
            Do *NOT* change this to simply forward to <see cref="M:StreamJsonRpc.JsonMessageFormatter.Serialize(StreamJsonRpc.Protocol.JsonRpcMessage)" /> since that
            mutates the <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> itself by tokenizing arguments as if we were going to transmit them
            which BREAKS argument parsing for incoming named argument messages such as $/cancelRequest.
            </devremarks>
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.TokenizeUserData(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <summary>
            Converts user data to <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects using all applicable user-provided <see cref="T:Newtonsoft.Json.JsonConverter" /> instances.
            </summary>
            <param name="jsonRpcMessage">A JSON-RPC message.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonMessageFormatter.TokenizeUserData(System.Object)">
            <summary>
            Converts a single user data value to a <see cref="T:Newtonsoft.Json.Linq.JToken" />, using all applicable user-provided <see cref="T:Newtonsoft.Json.JsonConverter" /> instances.
            </summary>
            <param name="value">The value to tokenize.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> instance.</returns>
        </member>
        <member name="T:StreamJsonRpc.JsonMessageFormatter.JsonArrayPool`1">
            <summary>
            Adapts the .NET <see cref="T:System.Buffers.ArrayPool`1" /> to Newtonsoft.Json's <see cref="T:Newtonsoft.Json.IArrayPool`1" /> interface.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonMessageFormatter.JsonProgressClientConverter">
            <summary>
            Converts an instance of <see cref="T:System.IProgress`1" /> to a progress token.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonMessageFormatter.JsonProgressServerConverter">
            <summary>
            Converts a progress token to an <see cref="T:System.IProgress`1" />.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonMessageFormatter.AsyncEnumerableConsumerConverter">
            <summary>
            Converts an enumeration token to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonMessageFormatter.AsyncEnumerableGeneratorConverter">
            <summary>
            Converts an instance of <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to an enumeration token.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonRpc">
            <summary>
            Manages a JSON-RPC connection with another entity over a <see cref="T:System.IO.Stream" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.DefaultSynchronizationContext">
            <summary>
            The <see cref="T:System.Threading.SynchronizationContext" /> to use to schedule work on the threadpool.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.dispatcherMapLock">
            <summary>
            The object to lock when accessing the <see cref="F:StreamJsonRpc.JsonRpc.resultDispatcherMap" /> or <see cref="F:StreamJsonRpc.JsonRpc.inboundCancellationSources" /> objects.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.disconnectedEventLock">
            <summary>
            The object to lock when accessing the <see cref="E:StreamJsonRpc.JsonRpc.DisconnectedPrivate" /> member.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.resultDispatcherMap">
            <summary>
            A map of outbound calls awaiting responses.
            Lock the <see cref="F:StreamJsonRpc.JsonRpc.dispatcherMapLock" /> object for all access to this member.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.inboundCancellationSources">
            <summary>
            A map of id's from inbound calls that have not yet completed and may be canceled,
            to their <see cref="T:System.Threading.CancellationTokenSource" /> instances.
            Lock the <see cref="F:StreamJsonRpc.JsonRpc.dispatcherMapLock" /> object for all access to this member.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.cancelPendingOutboundRequestAction">
            <summary>
            A delegate for the <see cref="M:StreamJsonRpc.JsonRpc.CancelPendingOutboundRequest(System.Object)" /> method.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.handleInvocationTaskOfTResultDelegate">
            <summary>
            A delegate for the <see cref="M:StreamJsonRpc.JsonRpc.HandleInvocationTaskOfTResult(StreamJsonRpc.Protocol.JsonRpcRequest,System.Threading.Tasks.Task)" /> method.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.handleInvocationTaskResultDelegate">
            <summary>
            A delegate for the <see cref="M:StreamJsonRpc.JsonRpc.HandleInvocationTaskResult(StreamJsonRpc.Protocol.JsonRpcRequest,System.Threading.Tasks.Task)" /> method.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.targetRequestMethodToClrMethodMap">
            <summary>
            A collection of target objects and their map of clr method to <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> values.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.disconnectedSource">
            <summary>
            The source for the <see cref="P:StreamJsonRpc.JsonRpc.DisconnectedToken" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.completionSource">
            <summary>
            The completion source behind <see cref="P:StreamJsonRpc.JsonRpc.Completion" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.remoteRpcTargets">
            <summary>
            List of remote RPC targets to call if connection should be relayed.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.eventReceivers">
            <summary>
            A list of event handlers we've registered on target objects that define events. May be <c>null</c> if there are no handlers.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.traceSource">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.JsonRpc.TraceSource" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.cancelLocallyInvokedMethodsWhenConnectionIsClosed">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.JsonRpc.CancelLocallyInvokedMethodsWhenConnectionIsClosed" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.synchronizationContext">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.JsonRpc.SynchronizationContext" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.requestTransmissionAborted">
            <summary>
            Backing field for the <see cref="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.RequestTransmissionAborted" /> event.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.responseReceived">
            <summary>
            Backing field for the <see cref="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.ResponseReceived" /> event.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.responseSent">
            <summary>
            Backing field for the <see cref="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.ResponseSent" /> event.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpc" /> class that uses
            <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> around messages serialized using the
            <see cref="T:StreamJsonRpc.JsonMessageFormatter" />.
            </summary>
            <param name="stream">The full duplex stream used to transmit and receive messages.</param>
            <remarks>
            It is important to call <see cref="M:StreamJsonRpc.JsonRpc.StartListening" /> to begin receiving messages.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.#ctor(System.IO.Stream,System.IO.Stream,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpc" /> class that uses
            <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> around messages serialized using the
            <see cref="T:StreamJsonRpc.JsonMessageFormatter" />.
            </summary>
            <param name="sendingStream">The stream used to transmit messages. May be null.</param>
            <param name="receivingStream">The stream used to receive messages. May be null.</param>
            <param name="target">An optional target object to invoke when incoming RPC requests arrive.</param>
            <remarks>
            It is important to call <see cref="M:StreamJsonRpc.JsonRpc.StartListening" /> to begin receiving messages.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.#ctor(StreamJsonRpc.IJsonRpcMessageHandler,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpc" /> class.
            </summary>
            <param name="messageHandler">The message handler to use to transmit and receive RPC messages.</param>
            <param name="target">An optional target object to invoke when incoming RPC requests arrive.</param>
            <remarks>
            It is important to call <see cref="M:StreamJsonRpc.JsonRpc.StartListening" /> to begin receiving messages.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.#ctor(StreamJsonRpc.IJsonRpcMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpc" /> class.
            </summary>
            <param name="messageHandler">The message handler to use to transmit and receive RPC messages.</param>
            <remarks>
            It is important to call <see cref="M:StreamJsonRpc.JsonRpc.StartListening" /> to begin receiving messages.
            </remarks>
        </member>
        <member name="E:StreamJsonRpc.JsonRpc.Disconnected">
            <summary>
            Raised when the underlying stream is disconnected.
            </summary>
        </member>
        <member name="E:StreamJsonRpc.JsonRpc.StreamJsonRpc#Reflection#IJsonRpcFormatterCallbacks#RequestTransmissionAborted">
            <inheritdoc />
        </member>
        <member name="E:StreamJsonRpc.JsonRpc.StreamJsonRpc#Reflection#IJsonRpcFormatterCallbacks#ResponseReceived">
            <inheritdoc />
        </member>
        <member name="E:StreamJsonRpc.JsonRpc.StreamJsonRpc#Reflection#IJsonRpcFormatterCallbacks#ResponseSent">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.JsonRpc.TraceEvents">
            <summary>
            Event IDs raised to our <see cref="P:StreamJsonRpc.JsonRpc.TraceSource" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.LocalMethodAdded">
            <summary>
            Occurs when a local RPC method is added to our mapping table.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.LocalMethodNotAdded">
            <summary>
            Occurs when a candidate local RPC method is NOT added to our mapping table.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.LocalEventListenerAdded">
            <summary>
            Occurs when an event handler subscribes to an event on an added target object.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.ListeningStarted">
            <summary>
            Occurs when this instance starts listening for incoming RPC messages.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.ReceivedCancellation">
            <summary>
            Occurs when a notification arrives that is attempting to cancel a prior request.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.RequestWithoutMatchingTarget">
            <summary>
            Occurs when a JSON-RPC request or notification was received, but no local method is found to invoke for it.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.RequestReceived">
            <summary>
            Occurs when a <see cref="T:StreamJsonRpc.Protocol.JsonRpcRequest" /> is received.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.MessageReceived">
            <summary>
            Occurs when any <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> is received.
            At <see cref="F:System.Diagnostics.TraceLevel.Info" />, <see cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
            is invoked with the <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> that is received.
            At <see cref="F:System.Diagnostics.TraceLevel.Verbose" />, <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
            is invoked with the JSON representation of the message.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.MessageSent">
            <summary>
            Occurs when any <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> is transmitted.
            At <see cref="F:System.Diagnostics.TraceLevel.Info" />, <see cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
            is invoked with the <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> that is transmitted.
            At <see cref="F:System.Diagnostics.TraceLevel.Verbose" />, <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
            is invoked with the JSON representation of the message.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.LocalInvocation">
            <summary>
            Occurs when a <see cref="T:StreamJsonRpc.Protocol.JsonRpcRequest" /> is received and successfully mapped to a local method to be invoked.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.LocalInvocationError">
            <summary>
            Occurs when a locally invoked method from a <see cref="T:StreamJsonRpc.Protocol.JsonRpcRequest" /> throws an exception (or returns a faulted <see cref="T:System.Threading.Tasks.Task" />).
            <see cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" /> is invoked with the thrown <see cref="T:System.Exception" />, request method name, request ID, and the argument object/array.
            <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" /> is invoked with a text message formatted with exception information.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.ReceivedResult">
            <summary>
            Occurs when a successful result message for a prior invocation is received.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.ReceivedError">
            <summary>
            Occurs when an error message for a prior invocation is received.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.Closed">
            <summary>
            Occurs when the connection is closed.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.RequestAbandonedByRemote">
            <summary>
            A local request is canceled because the remote party terminated the connection.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.LocalContractViolation">
            <summary>
            An extensibility point was leveraged locally and broke the contract.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.ProgressNotificationError">
            <summary>
            An exception occurred when reading the $/progress notification.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpc.TraceEvents.MethodArgumentDeserializationFailure">
            <summary>
            An incoming RPC call included an argument that failed to deserialize to the type on a candidate target method's proposed matching parameter.
            </summary>
            <remarks>
            This may not represent a fatal error. When there are multiple overloads to choose from,
            choosing the overload to invoke involves attempts to deserialize arguments to the types dictated by each overload's parameters.
            Thus a failure recorded in this event may be followed by a successful deserialization to another parameter type and invocation of a different overload.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.SynchronizationContext">
            <summary>
            Gets or sets the <see cref="T:System.Threading.SynchronizationContext" /> to use when invoking methods requested by the remote party.
            </summary>
            <value>Defaults to null.</value>
            <remarks>
            When not specified, methods are invoked on the threadpool.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when this instance is disposed or when listening has stopped
            whether by error, disposal or the stream closing.
            </summary>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task" /> may transition to a faulted state
            for exceptions fatal to the protocol or this instance.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.AllowModificationWhileListening">
            <summary>
            Gets or sets a value indicating whether configuration of this instance
            can be changed after <see cref="M:StreamJsonRpc.JsonRpc.StartListening" /> or <see cref="M:StreamJsonRpc.JsonRpc.Attach(System.IO.Stream,System.Object)" />
            has been called.
            </summary>
            <value>The default is <c>false</c>.</value>
            <remarks>
            By default, all configuration such as target objects and target methods must be set
            before listening starts to avoid a race condition whereby we receive a method invocation
            message before we have wired up a handler for it and must reject the call.
            But in some advanced scenarios, it may be necessary to add target methods after listening
            has started (e.g. in response to an invocation that enables additional functionality),
            in which case setting this property to <c>true</c> is appropriate.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.CancelLocallyInvokedMethodsWhenConnectionIsClosed">
            <summary>
            Gets or sets a value indicating whether to cancel all methods dispatched locally
            that accept a <see cref="T:System.Threading.CancellationToken" /> when the connection with the remote party is closed.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.TraceSource">
            <summary>
            Gets or sets the <see cref="T:System.Diagnostics.TraceSource" /> used to trace JSON-RPC messages and events.
            </summary>
            <value>The value can never be null.</value>
            <exception cref="T:System.ArgumentNullException">Thrown by the setter if a null value is provided.</exception>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.MessageHandler">
            <summary>
            Gets the message handler used to send and receive messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.DisconnectedToken">
            <summary>
            Gets a token that is cancelled when the connection is lost.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.SynchronizationContextOrDefault">
            <summary>
            Gets the user-specified <see cref="P:StreamJsonRpc.JsonRpc.SynchronizationContext" /> or a default instance that will execute work on the threadpool.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpc.HasListeningStarted">
            <summary>
            Gets a value indicating whether listening has started.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach(System.IO.Stream,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpc" /> class that uses
            <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> around messages serialized using the
            <see cref="T:StreamJsonRpc.JsonMessageFormatter" />, and immediately starts listening.
            </summary>
            <param name="stream">A bidirectional stream to send and receive RPC messages on.</param>
            <param name="target">An optional target object to invoke when incoming RPC requests arrive.</param>
            <returns>The initialized and listening <see cref="T:StreamJsonRpc.JsonRpc" /> object.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach(System.IO.Stream,System.IO.Stream,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpc" /> class that uses
            <see cref="T:StreamJsonRpc.HeaderDelimitedMessageHandler" /> around messages serialized using the
            <see cref="T:StreamJsonRpc.JsonMessageFormatter" />, and immediately starts listening.
            </summary>
            <param name="sendingStream">The stream used to transmit messages. May be null.</param>
            <param name="receivingStream">The stream used to receive messages. May be null.</param>
            <param name="target">An optional target object to invoke when incoming RPC requests arrive.</param>
            <returns>The initialized and listening <see cref="T:StreamJsonRpc.JsonRpc" /> object.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach``1(System.IO.Stream)">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <typeparam name="T">The interface that describes the functions available on the remote end.</typeparam>
            <param name="stream">The bidirectional stream used to send and receive JSON-RPC messages.</param>
            <returns>
            An instance of the generated proxy.
            In addition to implementing <typeparamref name="T" />, it also implements <see cref="T:System.IDisposable" />
            and should be disposed of to close the connection.
            </returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach``1(System.IO.Stream,System.IO.Stream)">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <typeparam name="T">The interface that describes the functions available on the remote end.</typeparam>
            <param name="sendingStream">The stream used to transmit messages. May be null.</param>
            <param name="receivingStream">The stream used to receive messages. May be null.</param>
            <returns>
            An instance of the generated proxy.
            In addition to implementing <typeparamref name="T" />, it also implements <see cref="T:System.IDisposable" />
            and should be disposed of to close the connection.
            </returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach``1(StreamJsonRpc.IJsonRpcMessageHandler)">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <typeparam name="T">The interface that describes the functions available on the remote end.</typeparam>
            <param name="handler">The message handler to use.</param>
            <returns>
            An instance of the generated proxy.
            In addition to implementing <typeparamref name="T" />, it also implements <see cref="T:System.IDisposable" />
            and should be disposed of to close the connection.
            </returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach``1(StreamJsonRpc.IJsonRpcMessageHandler,StreamJsonRpc.JsonRpcProxyOptions)">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <typeparam name="T">The interface that describes the functions available on the remote end.</typeparam>
            <param name="handler">The message handler to use.</param>
            <param name="options">A set of customizations for how the client proxy is wired up. If <c>null</c>, default options will be used.</param>
            <returns>
            An instance of the generated proxy.
            In addition to implementing <typeparamref name="T" />, it also implements <see cref="T:System.IDisposable" />
            and should be disposed of to close the connection.
            </returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach``1">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <typeparam name="T">The interface that describes the functions available on the remote end.</typeparam>
            <returns>An instance of the generated proxy.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach``1(StreamJsonRpc.JsonRpcProxyOptions)">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <typeparam name="T">The interface that describes the functions available on the remote end.</typeparam>
            <param name="options">A set of customizations for how the client proxy is wired up. If <c>null</c>, default options will be used.</param>
            <returns>An instance of the generated proxy.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach(System.Type)">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <param name="interfaceType">The interface that describes the functions available on the remote end.</param>
            <returns>An instance of the generated proxy.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Attach(System.Type,StreamJsonRpc.JsonRpcProxyOptions)">
            <summary>
            Creates a JSON-RPC client proxy that conforms to the specified server interface.
            </summary>
            <param name="interfaceType">The interface that describes the functions available on the remote end.</param>
            <param name="options">A set of customizations for how the client proxy is wired up. If <c>null</c>, default options will be used.</param>
            <returns>An instance of the generated proxy.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.AddLocalRpcTarget(System.Object)">
            <summary>
            Adds the specified target as possible object to invoke when incoming messages are received.  The target object
            should not inherit from each other and are invoked in the order which they are added.
            </summary>
            <param name="target">Target to invoke when incoming messages are received.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.AddLocalRpcTarget(System.Object,StreamJsonRpc.JsonRpcTargetOptions)">
            <summary>
            Adds the specified target as possible object to invoke when incoming messages are received.  The target object
            should not inherit from each other and are invoked in the order which they are added.
            </summary>
            <param name="target">Target to invoke when incoming messages are received.</param>
            <param name="options">A set of customizations for how the target object is registered. If <c>null</c>, default options will be used.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.AddRemoteRpcTarget(StreamJsonRpc.JsonRpc)">
            <summary>
            Adds a remote rpc connection so calls can be forwarded to the remote target if local targets do not handle it.
            </summary>
            <param name="remoteTarget">The json rpc connection to the remote target.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.AddLocalRpcMethod(System.String,System.Delegate)">
            <summary>
            Adds a handler for an RPC method with a given name.
            </summary>
            <param name="rpcMethodName">
            The name of the method as it is identified by the incoming JSON-RPC message.
            It need not match the name of the CLR method/delegate given here.
            </param>
            <param name="handler">
            The method or delegate to invoke when a matching RPC message arrives.
            This method may accept parameters from the incoming JSON-RPC message.
            </param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.AddLocalRpcMethod(System.String,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Adds a handler for an RPC method with a given name.
            </summary>
            <param name="rpcMethodName">
            The name of the method as it is identified by the incoming JSON-RPC message.
            It need not match the name of the CLR method/delegate given here.
            </param>
            <param name="handler">
            The method or delegate to invoke when a matching RPC message arrives.
            This method may accept parameters from the incoming JSON-RPC message.
            </param>
            <param name="target">An instance of the type that defines <paramref name="handler" /> which should handle the invocation.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.AddLocalRpcMethod(System.Reflection.MethodInfo,System.Object,StreamJsonRpc.JsonRpcMethodAttribute)">
            <summary>
            Adds a handler for an RPC method with a given name.
            </summary>
            <param name="handler">
            The method or delegate to invoke when a matching RPC message arrives.
            This method may accept parameters from the incoming JSON-RPC message.
            </param>
            <param name="target">An instance of the type that defines <paramref name="handler" /> which should handle the invocation.</param>
            <param name="methodRpcSettings">
            A description for how this method should be treated.
            It need not be an attribute that was actually applied to <paramref name="handler" />.
            An attribute will *not* be discovered via reflection on the <paramref name="handler" />, even if this value is <c>null</c>.
            </param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.GetJsonRpcMethodAttribute(System.String,System.ReadOnlySpan{System.Reflection.ParameterInfo})">
            <summary>
            Gets the <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> for a previously discovered RPC method, if there is one.
            </summary>
            <param name="methodName">The name of the method for which the attribute is sought.</param>
            <param name="parameters">
            The list of parameters found on the method, as they may be given to <see cref="M:StreamJsonRpc.Protocol.JsonRpcRequest.TryGetTypedArguments(System.ReadOnlySpan{System.Reflection.ParameterInfo},System.Span{System.Object})" />.
            Note this list may omit some special parameters such as a trailing <see cref="T:System.Threading.CancellationToken" />.
            </param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.StartListening">
            <summary>
            Starts listening to incoming messages.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeAsync(System.String,System.Object)">
            <summary>
            Invoke a method on the server.
            </summary>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="argument">Method argument, must be serializable to JSON.</param>
            <returns>A task that completes when the server method executes.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the server indicates completion of the method.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeAsync(System.String,System.Object[])">
            <summary>
            Invoke a method on the server.
            </summary>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="arguments">Method arguments, must be serializable to JSON.</param>
            <returns>A task that completes when the server method executes.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the server indicates completion of the method.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeAsync``1(System.String,System.Object)">
            <summary>
            Invoke a method on the server and get back the result.
            </summary>
            <typeparam name="TResult">Type of the method result.</typeparam>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="argument">Method argument, must be serializable to JSON.</param>
            <returns>A task that completes when the server method executes and returns the result.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the result gets back from the server.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeAsync``1(System.String,System.Object[])">
            <summary>
            Invoke a method on the server and get back the result.
            </summary>
            <typeparam name="TResult">Type of the method result.</typeparam>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="arguments">Method arguments, must be serializable to JSON.</param>
            <returns>A task that completes when the server method executes and returns the result.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the result gets back from the server.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeWithParameterObjectAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Invoke a method on the server.  The parameter is passed as an object.
            </summary>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="argument">Method argument, must be serializable to JSON.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <returns>A task that completes when the server method executes and returns the result.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the result gets back from the server.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeWithParameterObjectAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Invoke a method on the server and get back the result.  The parameter is passed as an object.
            </summary>
            <typeparam name="TResult">Type of the method result.</typeparam>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="argument">Method argument, must be serializable to JSON.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <returns>A task that completes when the server method executes and returns the result.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the result gets back from the server.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeWithCancellationAsync(System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invoke a method on the server.
            </summary>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="arguments">Method arguments, must be serializable to JSON.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <returns>A task that completes when the server method executes.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the result gets back from the server
            or in response to the <paramref name="cancellationToken" /> being canceled.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception,
            which may occur in response to the <paramref name="cancellationToken" /> being canceled.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeWithCancellationAsync``1(System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invoke a method on the server and get back the result.
            </summary>
            <typeparam name="TResult">Type of the method result.</typeparam>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="arguments">Method arguments, must be serializable to JSON.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <returns>A task that completes when the server method executes and returns the result.</returns>
            <exception cref="T:System.OperationCanceledException">
            Result task fails with this exception if the communication channel ends before the result gets back from the server
            or in response to the <paramref name="cancellationToken" /> being canceled.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            Result task fails with this exception if the server method throws an exception,
            which may occur in response to the <paramref name="cancellationToken" /> being canceled.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteMethodNotFoundException">
            Result task fails with this exception if the <paramref name="targetName" /> method has not been registered on the server.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.NotifyAsync(System.String,System.Object)">
            <summary>
            Invoke a method on the server and don't wait for its completion, fire-and-forget style.
            </summary>
            <remarks>
            Any error that happens on the server side is ignored.
            </remarks>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="argument">Method argument, must be serializable to JSON.</param>
            <returns>A task that completes when the notify request is sent to the channel to the server.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.NotifyAsync(System.String,System.Object[])">
            <summary>
            Invoke a method on the server and don't wait for its completion, fire-and-forget style.
            </summary>
            <remarks>
            Any error that happens on the server side is ignored.
            </remarks>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="arguments">Method arguments, must be serializable to JSON.</param>
            <returns>A task that completes when the notify request is sent to the channel to the server.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.NotifyWithParameterObjectAsync(System.String,System.Object)">
            <summary>
            Invoke a method on the server and don't wait for its completion, fire-and-forget style.  The parameter is passed as an object.
            </summary>
            <remarks>
            Any error that happens on the server side is ignored.
            </remarks>
            <param name="targetName">The name of the method to invoke on the server. Must not be null or empty string.</param>
            <param name="argument">Method argument, must be serializable to JSON.</param>
            <returns>A task that completes when the notify request is sent to the channel to the server.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetName" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If this instance of <see cref="T:StreamJsonRpc.JsonRpc" /> has been disposed.</exception>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.Dispose(System.Boolean)">
            <summary>
            Disposes managed and native resources held by this instance.
            </summary>
            <param name="disposing"><c>true</c> if being disposed; <c>false</c> if being finalized.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.IsFatalException(System.Exception)">
            <summary>
            Indicates whether the connection should be closed when the server throws an exception.
            </summary>
            <param name="ex">The <see cref="T:System.Exception" /> thrown from server that is potentially fatal.</param>
            <returns>A <see cref="T:System.Boolean" /> indicating if the streams should be closed.</returns>
            <remarks>
            This method is invoked within the context of an exception filter or when a task fails to complete and simply returns false by default.
            If the process should crash on an exception,
            calling <see cref="M:System.Environment.FailFast(System.String,System.Exception)" /> will produce such behavior.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.CreateErrorDetails(StreamJsonRpc.Protocol.JsonRpcRequest,System.Exception)">
            <summary>
            Creates the <see cref="T:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail" /> to be used as the value for the error property to be sent back to the client in response to an exception being thrown from an RPC method invoked locally.
            </summary>
            <param name="request">The request that led to the invocation that ended up failing.</param>
            <param name="exception">The exception thrown from the RPC method.</param>
            <returns>The error details to return to the client. Must not be <c>null</c>.</returns>
            <remarks>
            This method may be overridden in a derived class to change the way error details are expressed.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.GetErrorDetailsDataType(StreamJsonRpc.Protocol.JsonRpcError)">
            <summary>
            Determines the type that the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" /> object should be deserialized to
            for an incoming <see cref="T:StreamJsonRpc.Protocol.JsonRpcError" /> message.
            </summary>
            <param name="error">The received error message.</param>
            <returns>
            The type, or <c>null</c> if the type is unknown.
            </returns>
            <remarks>
            The default implementation matches what <see cref="M:StreamJsonRpc.JsonRpc.CreateErrorDetails(StreamJsonRpc.Protocol.JsonRpcRequest,System.Exception)" /> does
            by assuming that the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" /> object should be deserialized as an instance of <see cref="T:StreamJsonRpc.Protocol.CommonErrorData" />.
            However derived types can override this method and use <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Code" /> or other means to determine the appropriate type.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeCoreAsync``1(System.Nullable{System.Int64},System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC method.
            </summary>
            <typeparam name="TResult">RPC method return type.</typeparam>
            <param name="id">An identifier established by the Client that MUST contain a String, Number, or NULL value if included.
            If it is not included it is assumed to be a notification.</param>
            <param name="targetName">Name of the method to invoke.</param>
            <param name="arguments">Arguments to pass to the invoked method. If null, no arguments are passed.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <returns>A task whose result is the deserialized response from the JSON-RPC server.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeCoreAsync``1(StreamJsonRpc.RequestId,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC method.
            </summary>
            <typeparam name="TResult">RPC method return type.</typeparam>
            <param name="id">An identifier established by the Client that MUST contain a String, Number, or NULL value if included.
            If it is not included it is assumed to be a notification.</param>
            <param name="targetName">Name of the method to invoke.</param>
            <param name="arguments">Arguments to pass to the invoked method. If null, no arguments are passed.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <returns>A task whose result is the deserialized response from the JSON-RPC server.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeCoreAsync``1(System.Nullable{System.Int64},System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Invokes the specified RPC method.
            </summary>
            <typeparam name="TResult">RPC method return type.</typeparam>
            <param name="id">An identifier established by the Client. If the default value is given, it is assumed to be a notification.</param>
            <param name="targetName">Name of the method to invoke.</param>
            <param name="arguments">Arguments to pass to the invoked method. If null, no arguments are passed.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <param name="isParameterObject">Value which indicates if parameter should be passed as an object.</param>
            <returns>A task whose result is the deserialized response from the JSON-RPC server.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.InvokeCoreAsync``1(StreamJsonRpc.RequestId,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Invokes the specified RPC method.
            </summary>
            <typeparam name="TResult">RPC method return type.</typeparam>
            <param name="id">An identifier established by the Client. If the default value is given, it is assumed to be a notification.</param>
            <param name="targetName">Name of the method to invoke.</param>
            <param name="arguments">Arguments to pass to the invoked method. If null, no arguments are passed.</param>
            <param name="cancellationToken">The token whose cancellation should signal the server to stop processing this request.</param>
            <param name="isParameterObject">Value which indicates if parameter should be passed as an object.</param>
            <returns>A task whose result is the deserialized response from the JSON-RPC server.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.CreateNewRequestId">
            <summary>
            Creates a unique <see cref="T:StreamJsonRpc.RequestId" /> for an outbound request.
            </summary>
            <returns>The unique <see cref="T:StreamJsonRpc.RequestId" />.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.OnRequestTransmissionAborted(StreamJsonRpc.Protocol.JsonRpcRequest)">
            <summary>
            Raises the <see cref="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.RequestTransmissionAborted" /> event.
            </summary>
            <param name="request">The request whose transmission could not be completed.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.OnResponseReceived(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <summary>
            Raises the <see cref="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.ResponseReceived" /> event.
            </summary>
            <param name="response">The result or error that was received.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.OnResponseSent(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <summary>
            Raises the <see cref="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.ResponseSent" /> event.
            </summary>
            <param name="response">The result or error that was sent.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.GetRequestMethodToClrMethodMap(System.Object,StreamJsonRpc.JsonRpcTargetOptions)">
            <summary>
            Creates a dictionary which maps a request method name to its clr method name via <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> value.
            </summary>
            <param name="target">Object to reflect over and analyze its methods.</param>
            <param name="options">The options that apply for this target object.</param>
            <returns>Dictionary which maps a request method name to its clr method name.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.TryGetTaskOfTOrValueTaskOfTType(System.Reflection.TypeInfo,System.Reflection.TypeInfo@)">
            <summary>
            Extracts the literal <see cref="T:System.Threading.Tasks.Task`1" /> type from the type hierarchy of a given type.
            </summary>
            <param name="taskTypeInfo">The original type of the value returned from an RPC-invoked method.</param>
            <param name="taskOfTTypeInfo">Receives the <see cref="T:System.Threading.Tasks.Task`1" /> type that is a base type of <paramref name="taskTypeInfo" />, if found.</param>
            <returns><c>true</c> if <see cref="T:System.Threading.Tasks.Task`1" /> could be found in the type hierarchy; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.TryGetTaskFromValueTask(System.Object,System.Threading.Tasks.Task@)">
            <summary>
            Convert a <see cref="T:System.Threading.Tasks.ValueTask" /> or <see cref="T:System.Threading.Tasks.ValueTask`1" /> into a <see cref="T:System.Threading.Tasks.Task" /> if possible.
            </summary>
            <param name="result">The result from the RPC method invocation.</param>
            <param name="task">Receives the converted <see cref="T:System.Threading.Tasks.Task" /> object, if conversion was possible; otherwise <c>null</c>.</param>
            <returns><c>true</c> if conversion succeeded; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.CancelPendingOutboundRequest(System.Object)">
            <summary>
            Cancels an individual outbound pending request.
            </summary>
            <param name="state">The <see cref="T:StreamJsonRpc.RequestId" /> associated with the request to be canceled.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpc.ThrowIfConfigurationLocked">
            <summary>
            Throws an exception if we have already started listening,
            unless <see cref="P:StreamJsonRpc.JsonRpc.AllowModificationWhileListening" /> is <c>true</c>.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcEnumerableSettings">
            <summary>
            Provides customizations on performance characteristics of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that is passed over JSON-RPC.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEnumerableSettings.DefaultSettings">
            <summary>
            A shared instance with the default settings to use.
            </summary>
            <devremarks>
            This is internal because the type is mutable and thus cannot be safely shared.
            </devremarks>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcEnumerableSettings.MaxReadAhead">
            <summary>
            Gets or sets the maximum number of elements to read ahead and cache from the generator in anticipation of the consumer requesting those values.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcEnumerableSettings.MinBatchSize">
            <summary>
            Gets or sets the minimum number of elements to obtain from the generator before sending a batch of values to the consumer.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcEventSource">
            <summary>
            The ETW source for logging events for this library.
            </summary>
            <remarks>
            We use a fully-descriptive type name because the type name becomes the name
            of the ETW Provider.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.Instance">
            <summary>
            The singleton instance of this event source.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.SendingNotificationEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.SendingNotification(System.String,System.String)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.SendingRequestEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.SendingRequest(System.Int64,System.String,System.String)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.SendingCancellationRequestEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.SendingCancellationRequest(System.Int64)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.ReceivedResultEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.ReceivedResult(System.Int64)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.ReceivedErrorEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.ReceivedError(System.Int64,StreamJsonRpc.Protocol.JsonRpcErrorCode)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.ReceivedNoResponseEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.ReceivedNoResponse(System.Int64)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.ReceivedNotificationEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.ReceivedNotification(System.String,System.String)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.ReceivedRequestEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.ReceivedRequest(System.Int64,System.String,System.String)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.ReceivedCancellationRequestEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.ReceivedCancellationRequest(System.Int64)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.SendingResultEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.SendingResult(System.Int64)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.SendingErrorEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.SendingError(System.Int64,StreamJsonRpc.Protocol.JsonRpcErrorCode)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.TransmissionQueuedEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.TransmissionQueued" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcEventSource.TransmissionCompletedEvent">
            <summary>
            The event ID for the <see cref="M:StreamJsonRpc.JsonRpcEventSource.TransmissionCompleted" />.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpcEventSource" /> class.
            </summary>
            <remarks>
            ETW wants to see no more than one instance of this class.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.SendingNotification(System.String,System.String)">
            <summary>
            Signals the transmission of a notification.
            </summary>
            <param name="method">The name of the method.</param>
            <param name="args">A snippet representing the arguments.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.SendingRequest(System.Int64,System.String,System.String)">
            <summary>
            Signals the transmission of a request.
            </summary>
            <param name="requestId">The id of the request, if any.</param>
            <param name="method">The name of the method.</param>
            <param name="args">A snippet representing the arguments.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.ReceivedResult(System.Int64)">
            <summary>
            Signals the receipt of a successful response.
            </summary>
            <param name="requestId">The ID of the request being responded to.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.ReceivedError(System.Int64,StreamJsonRpc.Protocol.JsonRpcErrorCode)">
            <summary>
            Signals the receipt of a response.
            </summary>
            <param name="requestId">The ID of the request being responded to.</param>
            <param name="errorCode">The <see cref="T:StreamJsonRpc.Protocol.JsonRpcErrorCode" /> on the error response.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.ReceivedNoResponse(System.Int64)">
            <summary>
            Signals that the connection dropped before a response to a request was received.
            </summary>
            <param name="requestId">The ID of the request that did not receive a response.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.SendingCancellationRequest(System.Int64)">
            <summary>
            Signals that a previously transmitted request is being canceled.
            </summary>
            <param name="requestId">The ID of the request being canceled.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.ReceivedNotification(System.String,System.String)">
            <summary>
            Signals the receipt of a notification.
            </summary>
            <param name="method">The name of the method.</param>
            <param name="args">A snippet representing the arguments.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.ReceivedRequest(System.Int64,System.String,System.String)">
            <summary>
            Signals the receipt of a request.
            </summary>
            <param name="requestId">The id of the request, if any.</param>
            <param name="method">The name of the method.</param>
            <param name="args">A snippet representing the arguments.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.SendingResult(System.Int64)">
            <summary>
            Signals the transmission of a successful response.
            </summary>
            <param name="requestId">The ID of the request being responded to.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.SendingError(System.Int64,StreamJsonRpc.Protocol.JsonRpcErrorCode)">
            <summary>
            Signals the receipt of a response.
            </summary>
            <param name="requestId">The ID of the request being responded to.</param>
            <param name="errorCode">The <see cref="T:StreamJsonRpc.Protocol.JsonRpcErrorCode" /> on the error response.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.ReceivedCancellationRequest(System.Int64)">
            <summary>
            Signals that a previously transmitted request is being canceled.
            </summary>
            <param name="requestId">The ID of the request being canceled.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.TransmissionQueued">
            <summary>
            Signals that a message has been queued for transmission.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.TransmissionCompleted">
            <summary>
            Signals that a message has been transmitted.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcEventSource.GetArgumentsString(System.Object)">
            <summary>
            Creates a string representation of arguments of max 200 characters for logging.
            </summary>
            <param name="arguments">A single argument or an array of arguments.</param>
            <returns>String representation of first argument only.</returns>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcEventSource.Tasks">
            <summary>
            Names of constants in this class make up the middle term in the event name
            E.g.: StreamJsonRpc/InvokeMethod/Start.
            </summary>
            <remarks>Name of this class is important for EventSource.</remarks>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcEventSource.Tags">
            <summary>
            Names of constants in this class make up the middle term in the event name
            E.g.: StreamJsonRpc/InvokeMethod/Start.
            </summary>
            <remarks>Name of this class is important for EventSource.</remarks>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcExtensions">
            <summary>
            Extension methods for use with <see cref="T:StreamJsonRpc.JsonRpc" />.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcExtensions.WithJsonRpcSettings``1(System.Collections.Generic.IAsyncEnumerable{``0},StreamJsonRpc.JsonRpcEnumerableSettings)">
            <summary>
            Decorates an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> with settings that customize how StreamJsonRpc will send its items to the remote party.
            </summary>
            <typeparam name="T">The type of element enumerated by the sequence.</typeparam>
            <param name="enumerable">The enumerable to be decorated.</param>
            <param name="settings">The settings to associate with this enumerable.</param>
            <returns>The decorated enumerable instance.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcExtensions.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:StreamJsonRpc.JsonRpcExtensions.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)" />
        </member>
        <member name="M:StreamJsonRpc.JsonRpcExtensions.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> so it will be streamed over an RPC connection progressively
            instead of as an entire collection in one message.
            </summary>
            <typeparam name="T">The type of element enumerated by the sequence.</typeparam>
            <param name="enumerable">The enumerable to be converted.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The async enumerable instance.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcExtensions.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0},StreamJsonRpc.JsonRpcEnumerableSettings)">
            <inheritdoc cref="M:StreamJsonRpc.JsonRpcExtensions.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0},StreamJsonRpc.JsonRpcEnumerableSettings,System.Threading.CancellationToken)" />
        </member>
        <member name="M:StreamJsonRpc.JsonRpcExtensions.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0},StreamJsonRpc.JsonRpcEnumerableSettings,System.Threading.CancellationToken)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> so it will be streamed over an RPC connection progressively
            instead of as an entire collection in one message.
            </summary>
            <typeparam name="T">The type of element enumerated by the sequence.</typeparam>
            <param name="enumerable">The enumerable to be converted.</param>
            <param name="settings">The settings to associate with this enumerable.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The async enumerable instance.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcExtensions.WithPrefetchAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Preloads an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> with a cache of pre-enumerated items for inclusion in the initial transmission
            of the enumerable over an RPC channel.
            </summary>
            <typeparam name="T">The type of item in the collection.</typeparam>
            <param name="enumerable">The sequence to pre-fetch items from.</param>
            <param name="count">The number of items to pre-fetch. If this value is larger than the number of elements in the enumerable, all values will be pre-fetched.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A decorated <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> object that is specially prepared for processing by JSON-RPC with the preloaded values.</returns>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcExtensions.GetJsonRpcSettings``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Extracts the <see cref="T:StreamJsonRpc.JsonRpcEnumerableSettings" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            that may have been previously returned from <see cref="M:StreamJsonRpc.JsonRpcExtensions.WithJsonRpcSettings``1(System.Collections.Generic.IAsyncEnumerable{``0},StreamJsonRpc.JsonRpcEnumerableSettings)" />.
            </summary>
            <typeparam name="T">The type of element enumerated by the sequence.</typeparam>
            <param name="enumerable">The enumerable, which may have come from <see cref="M:StreamJsonRpc.JsonRpcExtensions.WithJsonRpcSettings``1(System.Collections.Generic.IAsyncEnumerable{``0},StreamJsonRpc.JsonRpcEnumerableSettings)" />.</param>
            <returns>The settings to use.</returns>
            <remarks>
            If the <paramref name="enumerable" /> did not come from <see cref="M:StreamJsonRpc.JsonRpcExtensions.WithJsonRpcSettings``1(System.Collections.Generic.IAsyncEnumerable{``0},StreamJsonRpc.JsonRpcEnumerableSettings)" />,
            the default settings will be returned.
            </remarks>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcProxyOptions">
            <summary>
            Options that may customize how a dynamically generated client proxy object calls into a <see cref="T:StreamJsonRpc.JsonRpc" /> instance.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcProxyOptions.methodNameTransform">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.JsonRpcProxyOptions.MethodNameTransform" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.JsonRpcProxyOptions.eventNameTransform">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.JsonRpcProxyOptions.EventNameTransform" /> property.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcProxyOptions.MethodNameTransform">
            <summary>
            Gets or sets a function that takes the CLR method name and returns the RPC method name.
            This method is useful for adding prefixes to all methods, or making them camelCased.
            </summary>
            <value>A function, defaulting to a straight pass-through. Never null.</value>
            <exception cref="T:System.ArgumentNullException">Thrown if set to a null value.</exception>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcProxyOptions.EventNameTransform">
            <summary>
            Gets or sets a function that takes the CLR event name and returns the RPC event name used in notifications.
            This method is useful for adding prefixes to all events, or making them camelCased.
            </summary>
            <value>A function, defaulting to a straight pass-through. Never null.</value>
            <exception cref="T:System.ArgumentNullException">Thrown if set to a null value.</exception>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcProxyOptions.ServerRequiresNamedArguments">
            <summary>
            Gets or sets a value indicating whether the client proxy will pass named arguments (i.e. an args object)
            instead of the default positional arguments (i.e. an args array).
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcProxyOptions.Default">
            <summary>
            Gets an instance with default properties.
            </summary>
            <remarks>
            Callers should *not* mutate properties on this instance since it is shared.
            </remarks>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcTargetOptions">
            <summary>
            Options that may customize how a target object is added to a <see cref="T:StreamJsonRpc.JsonRpc" /> instance.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcTargetOptions.MethodNameTransform">
            <summary>
            Gets or sets a function that takes the CLR method name and returns the RPC method name.
            This method is useful for adding prefixes to all methods, or making them camelCased.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcTargetOptions.EventNameTransform">
            <summary>
            Gets or sets a function that takes the CLR event name and returns the RPC event name used in notification messages.
            This method is useful for adding prefixes to all events, or making them camelCased.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcTargetOptions.NotifyClientOfEvents">
            <summary>
            Gets or sets a value indicating whether events raised on the target object
            should be relayed to the client via a JSON-RPC notify message.
            </summary>
            <value>The default is <c>true</c>.</value>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcTargetOptions.AllowNonPublicInvocation">
            <summary>
            Gets or sets a value indicating whether non-public methods/events on target objects can be invoked
            by remote clients.
            </summary>
            <value>The default value is <c>false</c>.</value>
            <remarks>
            The default for this property was <c>true</c> in the 1.x versions.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcTargetOptions.Default">
            <summary>
            Gets an instance with default properties.
            </summary>
            <remarks>
            Callers should *not* mutate properties on this instance since it is shared.
            </remarks>
        </member>
        <member name="T:StreamJsonRpc.LengthHeaderMessageHandler">
            <summary>
            A minimal header for each message that simply declares content length.
            </summary>
            <remarks>
            The length is expressed as a big endian, 4 byte integer.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.LengthHeaderMessageHandler.formatter">
            <summary>
            The formatter to use for message serialization.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.LengthHeaderMessageHandler.contentSequenceBuilder">
            <summary>
            The <see cref="T:System.Buffers.IBufferWriter`1" /> sent to the <see cref="F:StreamJsonRpc.LengthHeaderMessageHandler.formatter" /> to write the message.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.LengthHeaderMessageHandler.#ctor(System.IO.Pipelines.IDuplexPipe,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.LengthHeaderMessageHandler" /> class.
            </summary>
            <param name="pipe">The reader and writer to use for receiving/transmitting messages.</param>
            <param name="formatter">The formatter to use for message serialization.</param>
        </member>
        <member name="M:StreamJsonRpc.LengthHeaderMessageHandler.#ctor(System.IO.Pipelines.PipeWriter,System.IO.Pipelines.PipeReader,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.LengthHeaderMessageHandler" /> class.
            </summary>
            <param name="writer">The writer to use for transmitting messages.</param>
            <param name="reader">The reader to use for receiving messages.</param>
            <param name="formatter">The formatter to use for message serialization.</param>
        </member>
        <member name="M:StreamJsonRpc.LengthHeaderMessageHandler.#ctor(System.IO.Stream,System.IO.Stream,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.LengthHeaderMessageHandler" /> class.
            </summary>
            <param name="sendingStream">The stream to use for transmitting messages.</param>
            <param name="receivingStream">The stream to use for receiving messages.</param>
            <param name="formatter">The formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances.</param>
        </member>
        <member name="M:StreamJsonRpc.LengthHeaderMessageHandler.ReadCoreAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.LengthHeaderMessageHandler.Write(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.MessageHandlerBase">
            <summary>
            An abstract base class for for sending and receiving messages.
            </summary>
            <remarks>
            This class and its derivatives are safe to call from any thread.
            Calls to <see cref="M:StreamJsonRpc.MessageHandlerBase.WriteAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)" />
            are protected by a semaphore to guarantee message integrity
            and may be made from any thread.
            The caller must take care to call <see cref="M:StreamJsonRpc.MessageHandlerBase.ReadAsync(System.Threading.CancellationToken)" /> sequentially.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.disposalTokenSource">
            <summary>
            The source of a token that is canceled when this instance is disposed.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.sendingSemaphore">
            <summary>
            A semaphore acquired while sending a message.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.syncObject">
            <summary>
            The sync object to lock when inspecting and mutating the <see cref="F:StreamJsonRpc.MessageHandlerBase.state" /> field.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.readingCompleted">
            <summary>
            A signal that the last read operation has completed.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.writingCompleted">
            <summary>
            A signal that the last write operation has completed.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.state">
            <summary>
            A value indicating whether the <see cref="M:StreamJsonRpc.MessageHandlerBase.ReadAsync(System.Threading.CancellationToken)" /> and/or <see cref="M:StreamJsonRpc.MessageHandlerBase.WriteAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)" /> methods are in progress.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.#ctor(StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.MessageHandlerBase" /> class.
            </summary>
            <param name="formatter">The formatter used to serialize messages.</param>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.MessageHandlerState.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.MessageHandlerState.Writing">
            <summary>
            Indicates that the <see cref="M:StreamJsonRpc.MessageHandlerBase.WriteAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)" /> method is in running.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessageHandlerBase.MessageHandlerState.Reading">
            <summary>
            Indicates that the <see cref="M:StreamJsonRpc.MessageHandlerBase.ReadAsync(System.Threading.CancellationToken)" /> method is in running.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessageHandlerBase.CanRead">
            <summary>
            Gets a value indicating whether this message handler can receive messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessageHandlerBase.CanWrite">
            <summary>
            Gets a value indicating whether this message handler can send messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessageHandlerBase.Formatter">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.MessageHandlerBase.Microsoft#IDisposableObservable#IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessageHandlerBase.DisposalToken">
            <summary>
            Gets a token that is canceled when this instance is disposed.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessageHandlerBase.Completion">
            <summary>
            Gets a task that completes when this instance has completed disposal.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a distinct and complete message from the transport, waiting for one if necessary.
            </summary>
            <param name="cancellationToken">A token to cancel the read request.</param>
            <returns>The received message, or <c>null</c> if the underlying transport ends before beginning another message.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:StreamJsonRpc.MessageHandlerBase.CanRead" /> returns <c>false</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Thrown if the transport ends while reading a message.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before a new message is received.</exception>
            <remarks>
            Implementations may assume this method is never called before any async result
            from a prior call to this method has completed.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.WriteAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Writes a message to the transport and flushes.
            </summary>
            <param name="content">The message to write.</param>
            <param name="cancellationToken">A token to cancel the write request.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:StreamJsonRpc.MessageHandlerBase.CanWrite" /> returns <c>false</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before message transmission begins.</exception>
            <remarks>
            Implementations should expect this method to be invoked concurrently
            and use a queue to preserve message order as they are transmitted one at a time.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.Dispose">
            <summary>
            Disposes this instance, and cancels any pending read or write operations.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.DisposeAsync">
            <summary>
            Disposes this instance, and cancels any pending read or write operations.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.Dispose(System.Boolean)">
            <summary>
            Disposes resources allocated by this instance that are common to both reading and writing.
            </summary>
            <param name="disposing"><c>true</c> when being disposed; <c>false</c> when being finalized.</param>
            <remarks>
            <para>
            This method is called by <see cref="M:StreamJsonRpc.MessageHandlerBase.DisposeAsync" /> after both <see cref="M:StreamJsonRpc.MessageHandlerBase.DisposeReader" /> and <see cref="M:StreamJsonRpc.MessageHandlerBase.DisposeWriter" /> have completed.
            </para>
            <para>Overrides of this method *should* call the base method as well.</para>
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.DisposeReader">
            <summary>
            Disposes resources allocated by this instance that are used for reading (not writing).
            </summary>
            <remarks>
            This method is called by <see cref="T:StreamJsonRpc.MessageHandlerBase" /> after the last read operation has completed.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.DisposeWriter">
            <summary>
            Disposes resources allocated by this instance that are used for writing (not reading).
            </summary>
            <remarks>
            This method is called by <see cref="T:StreamJsonRpc.MessageHandlerBase" /> after the last write operation has completed.
            Overrides of this method *should* call the base method as well.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.ReadCoreAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a distinct and complete message, waiting for one if necessary.
            </summary>
            <param name="cancellationToken">A token to cancel the read request.</param>
            <returns>
            A task whose result is the received message.
            A null string indicates the stream has ended.
            An empty string should never be returned.
            </returns>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.WriteCoreAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Writes a message.
            </summary>
            <param name="content">The message to write.</param>
            <param name="cancellationToken">A token to cancel the transmission.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:StreamJsonRpc.MessageHandlerBase.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Ensures that all messages transmitted up to this point are en route to their destination,
            rather than sitting in some local buffer.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that completes when the write buffer has been transmitted,
            or at least that the operation is in progress, if final transmission cannot be tracked.
            </returns>
        </member>
        <member name="T:StreamJsonRpc.MessagePackFormatter">
            <summary>
            Serializes JSON-RPC messages using MessagePack (a fast, compact binary format).
            </summary>
            <remarks>
            The MessagePack implementation used here comes from https://github.com/neuecc/MessagePack-CSharp.
            The README on that project site describes use cases and its performance compared to alternative
            .NET MessagePack implementations and this one appears to be the best by far.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.VersionPropertyName">
            <summary>
            The constant "jsonrpc".
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.messageSerializationOptions">
            <summary>
            The options to use for serializing top-level RPC messages.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.multiplexingStream">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.MessagePackFormatter.MultiplexingStream" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.formatterProgressTracker">
            <summary>
            The <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker" /> we use to support <see cref="T:System.IProgress`1" /> method arguments.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.duplexPipeTracker">
            <summary>
            The helper for marshaling pipes as RPC method arguments.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.enumerableTracker">
            <summary>
            The tracker we use to support transmission of <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> types.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.serializingMessageWithId">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingMessageWithId" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.deserializingMessageWithId">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.DeserializingMessageWithId" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.serializingRequest">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingRequest" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.userDataSerializationOptions">
            <summary>
            The options to use for serializing user data (e.g. arguments, return values and errors).
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MessagePackFormatter.rpc">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.IJsonRpcInstanceContainer.Rpc" /> property.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.MessagePackFormatter" /> class.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.IJsonRpcMessagePackRetention.OriginalMessagePack">
            <summary>
            Gets the original msgpack sequence that was deserialized into this message.
            </summary>
            <remarks>
            The buffer is only retained for a short time. If it has already been cleared, the result of this property is an empty sequence.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.StreamJsonRpc#IJsonRpcInstanceContainer#Rpc">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.MultiplexingStream">
            <summary>
            Gets or sets the <see cref="P:StreamJsonRpc.MessagePackFormatter.MultiplexingStream" /> that may be used to establish out of band communication (e.g. marshal <see cref="T:System.IO.Pipelines.IDuplexPipe" /> arguments).
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.StreamJsonRpc#Reflection#IJsonRpcFormatterState#SerializingMessageWithId">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.StreamJsonRpc#Reflection#IJsonRpcFormatterState#DeserializingMessageWithId">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.StreamJsonRpc#Reflection#IJsonRpcFormatterState#SerializingRequest">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.FormatterProgressTracker">
            <summary>
            Gets the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker" /> instance containing useful methods to help on the implementation of message formatters.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.DuplexPipeTracker">
            <summary>
            Gets the helper for marshaling pipes as RPC method arguments.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.MessagePackFormatter.EnumerableTracker">
            <summary>
            Gets the helper for marshaling <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> in RPC method arguments or return values.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.SetMessagePackSerializerOptions(MessagePack.MessagePackSerializerOptions)">
            <summary>
            Sets the <see cref="T:MessagePack.MessagePackSerializerOptions" /> to use for serialization of user data.
            </summary>
            <param name="options">
            The options to use. Before this call, the options used come from <see cref="P:MessagePack.MessagePackSerializerOptions.Standard" />
            modified to use the <see cref="F:MessagePack.MessagePackSecurity.UntrustedData" /> security setting.
            </param>
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.Deserialize(System.Buffers.ReadOnlySequence{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.Serialize(System.Buffers.IBufferWriter{System.Byte},StreamJsonRpc.Protocol.JsonRpcMessage)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.GetJsonText(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.GetParamsObjectDictionary(System.Object)">
            <summary>
            Extracts a dictionary of property names and values from the specified params object.
            </summary>
            <param name="paramsObject">The params object.</param>
            <returns>A dictionary, or <c>null</c> if <paramref name="paramsObject" /> is null.</returns>
            <remarks>
            This method supports DataContractSerializer-compliant types. This includes C# anonymous types.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.MassageUserDataOptions(MessagePack.MessagePackSerializerOptions)">
            <summary>
            Takes the user-supplied resolver for their data types and prepares the wrapping options
            and the dynamic object wrapper for serialization.
            </summary>
            <param name="userSuppliedOptions">The options for user data that is supplied by the user (or the default).</param>
            <returns>The <see cref="T:MessagePack.MessagePackSerializerOptions" /> to use for all user data (args, return values and error data) and a special formatter to use when all we have is <see cref="T:System.Object" /> for this user data.</returns>
        </member>
        <member name="M:StreamJsonRpc.MessagePackFormatter.RawMessagePack.ReadRaw(MessagePack.MessagePackReader@,System.Boolean)">
            <summary>
            Reads one raw messagepack token.
            </summary>
            <param name="reader">The reader to use.</param>
            <param name="copy"><c>true</c> if the token must outlive the lifetime of the reader's underlying buffer; <c>false</c> otherwise.</param>
            <returns>The raw messagepack slice.</returns>
        </member>
        <member name="T:StreamJsonRpc.MessagePackFormatter.ProgressFormatterResolver.ProgressClientFormatter`1">
            <summary>
            Converts an instance of <see cref="T:System.IProgress`1" /> to a progress token.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.MessagePackFormatter.ProgressFormatterResolver.PreciseTypeFormatter`1">
            <summary>
            Converts a progress token to an <see cref="T:System.IProgress`1" /> or an <see cref="T:System.IProgress`1" /> into a token.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.MessagePackFormatter.AsyncEnumerableFormatterResolver.PreciseTypeFormatter`1">
            <summary>
            Converts an enumeration token to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            or an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> into an enumeration token.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.MessagePackFormatter.AsyncEnumerableFormatterResolver.GeneratorFormatter`2">
            <summary>
            Converts an instance of <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to an enumeration token.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.NewLineDelimitedMessageHandler">
            <summary>
            A JSON-RPC message handler that delimits messages with new lines.
            </summary>
            <remarks>
            When reading messages, either \n or \r\n character sequences are permitted for new lines.
            When writing messages the <see cref="P:StreamJsonRpc.NewLineDelimitedMessageHandler.NewLine" /> property controls which character sequence is used to terminate each message.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.NewLineDelimitedMessageHandler.newLine">
            <summary>
            Backing field for the <see cref="P:StreamJsonRpc.NewLineDelimitedMessageHandler.NewLine" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.NewLineDelimitedMessageHandler.newLineBytes">
            <summary>
            The bytes to write out as the new line after each message.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.NewLineDelimitedMessageHandler.#ctor(System.IO.Pipelines.IDuplexPipe,StreamJsonRpc.IJsonRpcMessageTextFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.NewLineDelimitedMessageHandler" /> class.
            </summary>
            <param name="pipe">The reader and writer to use for receiving/transmitting messages.</param>
            <param name="formatter">The formatter used to serialize messages. Only UTF-8 formatters are supported.</param>
        </member>
        <member name="M:StreamJsonRpc.NewLineDelimitedMessageHandler.#ctor(System.IO.Pipelines.PipeWriter,System.IO.Pipelines.PipeReader,StreamJsonRpc.IJsonRpcMessageTextFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.NewLineDelimitedMessageHandler" /> class.
            </summary>
            <param name="writer">The writer to use for transmitting messages.</param>
            <param name="reader">The reader to use for receiving messages.</param>
            <param name="formatter">The formatter used to serialize messages. Only UTF-8 formatters are supported.</param>
        </member>
        <member name="M:StreamJsonRpc.NewLineDelimitedMessageHandler.#ctor(System.IO.Stream,System.IO.Stream,StreamJsonRpc.IJsonRpcMessageTextFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.NewLineDelimitedMessageHandler" /> class.
            </summary>
            <param name="writer">The stream to use for transmitting messages.</param>
            <param name="reader">The stream to use for receiving messages.</param>
            <param name="formatter">The formatter used to serialize messages. Only UTF-8 formatters are supported.</param>
        </member>
        <member name="T:StreamJsonRpc.NewLineDelimitedMessageHandler.NewLineStyle">
            <summary>
            Describes the supported styles of new lines that can be written.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.NewLineDelimitedMessageHandler.NewLineStyle.Lf">
            <summary>
            Newlines are represented as a single \n character.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.NewLineDelimitedMessageHandler.NewLineStyle.CrLf">
            <summary>
            Newlines are represented by a \r\n character sequence.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.NewLineDelimitedMessageHandler.NewLine">
            <summary>
            Gets or sets the new line sequence to use to terminate a JSON-RPC message.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.NewLineDelimitedMessageHandler.Formatter">
            <inheritdoc cref="P:StreamJsonRpc.MessageHandlerBase.Formatter" />
        </member>
        <member name="M:StreamJsonRpc.NewLineDelimitedMessageHandler.Write(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.NewLineDelimitedMessageHandler.ReadCoreAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.NewLineDelimitedMessageHandler.GetLineFeedSequence(System.Text.Encoding,StreamJsonRpc.NewLineDelimitedMessageHandler.NewLineStyle)">
            <summary>
            Gets the byte sequence for new lines.
            </summary>
            <param name="encoding">The encoding to use to convert the new line characters to bytes.</param>
            <param name="style">The style of new line to produce.</param>
            <returns>The bytes to emit for each new line.</returns>
        </member>
        <member name="M:StreamJsonRpc.NewLineDelimitedMessageHandler.CommonConstructor">
            <summary>
            Validates and initializes fields as they should be from every constructor.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.PipeMessageHandler">
            <summary>
            An abstract base class for for sending and receiving messages
            using <see cref="T:System.IO.Pipelines.PipeReader" /> and <see cref="T:System.IO.Pipelines.PipeWriter" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.PipeMessageHandler.LargeMessageThreshold">
            <summary>
            The largest size of a message to buffer completely before deserialization begins
            when we have an async deserializing alternative from the formatter.
            </summary>
            <remarks>
            This value is chosen to match the default buffer size for the <see cref="T:System.IO.Pipelines.PipeOptions" /> class
            since exceeding the <see cref="P:System.IO.Pipelines.PipeOptions.PauseWriterThreshold" /> would cause an exception
            when we call <see cref="M:System.IO.Pipelines.PipeReader.AdvanceTo(System.SequencePosition,System.SequencePosition)" /> to wait for more data.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.#ctor(System.IO.Pipelines.IDuplexPipe,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.PipeMessageHandler" /> class.
            </summary>
            <param name="pipe">The reader and writer to use for receiving/transmitting messages.</param>
            <param name="formatter">The formatter used to serialize messages.</param>
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.#ctor(System.IO.Pipelines.PipeWriter,System.IO.Pipelines.PipeReader,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.PipeMessageHandler" /> class.
            </summary>
            <param name="writer">The writer to use for transmitting messages.</param>
            <param name="reader">The reader to use for receiving messages.</param>
            <param name="formatter">The formatter used to serialize messages.</param>
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.#ctor(System.IO.Stream,System.IO.Stream,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.PipeMessageHandler" /> class.
            </summary>
            <param name="writer">The stream to use for transmitting messages.</param>
            <param name="reader">The stream to use for receiving messages.</param>
            <param name="formatter">The formatter used to serialize messages.</param>
        </member>
        <member name="P:StreamJsonRpc.PipeMessageHandler.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.PipeMessageHandler.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.PipeMessageHandler.Reader">
            <summary>
            Gets the reader to use for receiving messages.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.PipeMessageHandler.Writer">
            <summary>
            Gets the writer to use for transmitting messages.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.StreamJsonRpc#Reflection#IJsonRpcMessageBufferManager#DeserializationComplete(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.Write(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Writes a message to the pipe.
            </summary>
            <param name="content">The message to write.</param>
            <param name="cancellationToken">A token to cancel the transmission.</param>
            <remarks>
            Implementations may assume the method is never called before the previous call has completed.
            They can assume their caller will invoke <see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> on their behalf
            after writing is completed.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.DisposeReader">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.DisposeWriter">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.ReadAtLeastAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads from the <see cref="P:StreamJsonRpc.PipeMessageHandler.Reader" /> until at least a specified number of bytes are available.
            </summary>
            <param name="requiredBytes">The number of bytes that must be available.</param>
            <param name="allowEmpty"><c>true</c> to allow returning 0 bytes if the end of the stream is encountered before any bytes are read.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The <see cref="T:System.IO.Pipelines.ReadResult" /> containing at least <paramref name="requiredBytes" /> bytes.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <see cref="P:System.IO.Pipelines.ReadResult.IsCanceled" />.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown if <see cref="P:System.IO.Pipelines.ReadResult.IsCompleted" /> before we have <paramref name="requiredBytes" /> bytes.
            Not thrown if 0 bytes were read and <paramref name="allowEmpty" /> is <c>true</c>.
            </exception>
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.DeserializeMessageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deserializes a JSON-RPC message using the <see cref="P:StreamJsonRpc.MessageHandlerBase.Formatter" />.
            </summary>
            <param name="contentLength">The length of the JSON-RPC message.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="M:StreamJsonRpc.PipeMessageHandler.DeserializeMessageAsync(System.Int32,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Deserializes a JSON-RPC message using the <see cref="P:StreamJsonRpc.MessageHandlerBase.Formatter" />.
            </summary>
            <param name="contentLength">The length of the JSON-RPC message.</param>
            <param name="specificEncoding">The encoding to use during deserialization, as specified in a header for this particular message.</param>
            <param name="defaultEncoding">The encoding to use when <paramref name="specificEncoding" /> is <c>null</c> if the <see cref="P:StreamJsonRpc.MessageHandlerBase.Formatter" /> supports encoding.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The deserialized message.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if <paramref name="specificEncoding" /> is non-null and the formatter does not implement the appropriate interface to supply the encoding.</exception>
        </member>
        <member name="T:StreamJsonRpc.Protocol.CommonErrorData">
            <summary>
            A class that describes useful data that may be found in the JSON-RPC error message's error.data property.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Protocol.CommonErrorData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Protocol.CommonErrorData" /> class.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Protocol.CommonErrorData.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Protocol.CommonErrorData" /> class.
            </summary>
            <param name="copyFrom">The exception to copy error details from.</param>
        </member>
        <member name="P:StreamJsonRpc.Protocol.CommonErrorData.TypeName">
            <summary>
            Gets or sets the type of error (e.g. the full type name of the exception thrown).
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.CommonErrorData.Message">
            <summary>
            Gets or sets the message associated with this error.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.CommonErrorData.StackTrace">
            <summary>
            Gets or sets the stack trace associated with the error.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.CommonErrorData.HResult">
            <summary>
            Gets or sets the application error code or HRESULT of the failure.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.CommonErrorData.Inner">
            <summary>
            Gets or sets the inner error information, if any.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.IJsonRpcMessageWithId.RequestId">
            <summary>
            Gets or sets the ID on a message.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Protocol.JsonRpcError">
            <summary>
            Describes the error resulting from a <see cref="T:StreamJsonRpc.Protocol.JsonRpcRequest" /> that failed on the server.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcError.Error">
            <summary>
            Gets or sets the detail about the error.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcError.Id">
            <summary>
            Gets or sets an identifier established by the client if a response to the request is expected.
            </summary>
            <value>A <see cref="T:System.String" />, an <see cref="T:System.Int32" />, a <see cref="T:System.Int64" />, or <c>null</c>.</value>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcError.RequestId">
            <summary>
            Gets or sets an identifier established by the client if a response to the request is expected.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcError.DebuggerDisplay">
            <summary>
            Gets the string to display in the debugger for this instance.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcError.ToString">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail">
            <summary>
            Describes the error.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Code">
            <summary>
            Gets or sets a number that indicates the error type that occurred.
            </summary>
            <value>
            The error codes from and including -32768 to -32000 are reserved for errors defined by the spec or this library.
            Codes outside that range are available for app-specific error codes.
            </value>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Message">
            <summary>
            Gets or sets a short description of the error.
            </summary>
            <remarks>
            The message SHOULD be limited to a concise single sentence.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data">
            <summary>
            Gets or sets additional data about the error.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.GetData``1">
            <summary>
            Gets the value of the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" />, taking into account any possible type coercion.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> to coerce the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" /> to.</typeparam>
            <returns>The result.</returns>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.GetData(System.Type)">
            <summary>
            Gets the value of the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" />, taking into account any possible type coercion.
            </summary>
            <param name="dataType">The <see cref="T:System.Type" /> to deserialize the data object to.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="dataType" /> is null.</exception>
            <remarks>
            Derived types may override this method in order to deserialize the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" />
            such that it can be assignable to <paramref name="dataType" />.
            The default implementation does nothing to convert the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" /> object to match <paramref name="dataType" />, but simply returns the existing object.
            Derived types should *not* throw exceptions. This is a best effort method and returning null or some other value is preferable to throwing
            as it can disrupt an existing exception handling path.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.SetExpectedDataType(System.Type)">
            <summary>
            Provides a hint for a deferred deserialization of the <see cref="P:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data" /> value as to the type
            argument that will be used when calling <see cref="M:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.GetData``1" /> later.
            </summary>
            <param name="dataType">The type that will be used as the generic type argument to <see cref="M:StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.GetData``1" />.</param>
        </member>
        <member name="T:StreamJsonRpc.Protocol.JsonRpcErrorCode">
            <summary>
            Error codes laid out in the JSON-RPC spec or this library.
            </summary>
            <remarks>
            The error codes from and including -32768 to -32000 are reserved for pre-defined errors.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.InvocationError">
            <summary>
            Indicates the RPC call was made but the target threw an exception.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.NoMarshaledObjectFound">
            <summary>
            Indicates a request was made to a remotely marshaled object that never existed or has already been disposed of.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.ParseError">
            <summary>
            Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.InvalidRequest">
            <summary>
            The JSON sent is not a valid Request object.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.MethodNotFound">
            <summary>
            The method does not exist / is not available.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.InvalidParams">
            <summary>
            Invalid method parameter(s).
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.InternalError">
            <summary>
            Internal JSON-RPC error.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcErrorCode.RequestCanceled">
            <summary>
            Execution of the server method was aborted due to a cancellation request from the client.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Protocol.JsonRpcMessage">
            <summary>
            The base class for a JSON-RPC request or response.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcMessage.Version">
            <summary>
            Gets or sets the version of the JSON-RPC protocol that this message conforms to.
            </summary>
            <value>Defaults to "2.0".</value>
        </member>
        <member name="T:StreamJsonRpc.Protocol.JsonRpcRequest">
            <summary>
            Describes a method to be invoked on the server.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult">
            <summary>
            The result of an attempt to match request arguments with a candidate method's parameters.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.Success">
            <summary>
            All arguments matched up with all method parameters.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.ParameterArgumentCountMismatch">
            <summary>
            The number of arguments did not match the number of parameters.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.ParameterArgumentTypeMismatch">
            <summary>
            At least one argument could not be made to match its corresponding parameter.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.MissingArgument">
            <summary>
            An argument could not be found for a required parameter.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.Method">
            <summary>
            Gets or sets the name of the method to be invoked.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.Arguments">
            <summary>
            Gets or sets the arguments to use when invoking the specified <see cref="P:StreamJsonRpc.Protocol.JsonRpcRequest.Method" />.
            Either an array of arguments or an object whose properties are used in a named arguments object.
            </summary>
            <value>
            An array of arguments OR map of named arguments.
            Preferably either an instance of <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> where the key is a string representing the name of the parameter
            and the value is the argument, or an array of <see cref="T:System.Object" />.
            If neither of these, <see cref="P:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentCount" /> and <see cref="M:StreamJsonRpc.Protocol.JsonRpcRequest.TryGetArgumentByNameOrIndex(System.String,System.Int32,System.Type,System.Object@)" /> should be overridden.
            </value>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.Id">
            <summary>
            Gets or sets an identifier established by the client if a response to the request is expected.
            </summary>
            <value>A <see cref="T:System.String" />, an <see cref="T:System.Int32" />, a <see cref="T:System.Int64" />, or <c>null</c>.</value>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.RequestId">
            <summary>
            Gets or sets an identifier established by the client if a response to the request is expected.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.IsResponseExpected">
            <summary>
            Gets a value indicating whether a response to this request is expected.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.IsNotification">
            <summary>
            Gets a value indicating whether this is a notification, and no response is expected.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentCount">
            <summary>
            Gets the number of arguments supplied in the request.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.NamedArguments">
            <summary>
            Gets or sets the dictionary of named arguments, if applicable.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentsArray">
            <summary>
            Gets or sets an array of arguments, if applicable.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentsList">
            <summary>
            Gets or sets a read only list of arguments, if applicable.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcRequest.DebuggerDisplay">
            <summary>
            Gets the string to display in the debugger for this instance.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcRequest.TryGetTypedArguments(System.ReadOnlySpan{System.Reflection.ParameterInfo},System.Span{System.Object})">
            <summary>
            Gets the arguments to supply to the method invocation, coerced to types that will satisfy the given list of parameters.
            </summary>
            <param name="parameters">The list of parameters that the arguments must satisfy.</param>
            <param name="typedArguments">
            An array to initialize with arguments that can satisfy CLR type requirements for each of the <paramref name="parameters" />.
            The length of this span must equal the length of <paramref name="parameters" />.
            </param>
            <returns><c>true</c> if all the arguments can conform to the types of the <paramref name="parameters" /> and <paramref name="typedArguments" /> is initialized; <c>false</c> otherwise.</returns>
            <exception cref="T:StreamJsonRpc.RpcArgumentDeserializationException">Thrown if the argument exists, but cannot be deserialized.</exception>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcRequest.TryGetArgumentByNameOrIndex(System.String,System.Int32,System.Type,System.Object@)">
            <summary>
            Retrieves an argument for the RPC request.
            </summary>
            <param name="name">The name of the parameter that requires an argument. May be null if the caller knows they want a positional argument.</param>
            <param name="position">The index of the parameter that requires an argument. May be -1 for an argument with no position.</param>
            <param name="typeHint">The type of the parameter that requires an argument. May be null if the type need not be coerced.</param>
            <param name="value">Receives the value of the argument, if it exists. It MAY be returned even if it does not conform to <paramref name="typeHint" />.</param>
            <returns><c>true</c> if an argument is available for a parameter with the given name or position; <c>false</c> otherwise.</returns>
            <remarks>
            A derived-type may override this method in order to consider the <paramref name="typeHint" />
            and deserialize the required argument on-demand such that it can satisfy the type requirement.
            </remarks>
            <exception cref="T:StreamJsonRpc.RpcArgumentDeserializationException">Thrown if the argument exists, but cannot be deserialized.</exception>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcRequest.ToString">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.Protocol.JsonRpcResult">
            <summary>
            Describes the result of a successful method invocation.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcResult.Result">
            <summary>
            Gets or sets the value of the result of an invocation, if any.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcResult.Id">
            <summary>
            Gets or sets an identifier established by the client if a response to the request is expected.
            </summary>
            <value>A <see cref="T:System.String" />, an <see cref="T:System.Int32" />, a <see cref="T:System.Int64" />, or <c>null</c>.</value>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcResult.RequestId">
            <summary>
            Gets or sets an identifier established by the client if a response to the request is expected.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Protocol.JsonRpcResult.DebuggerDisplay">
            <summary>
            Gets the string to display in the debugger for this instance.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcResult.GetResult``1">
            <summary>
            Gets the value of the <see cref="P:StreamJsonRpc.Protocol.JsonRpcResult.Result" />, taking into account any possible type coercion.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> to coerce the <see cref="P:StreamJsonRpc.Protocol.JsonRpcResult.Result" /> to.</typeparam>
            <returns>The result.</returns>
            <remarks>
            Derived types may override this method in order to deserialize the <see cref="P:StreamJsonRpc.Protocol.JsonRpcResult.Result" />
            such that it can be assignable to <typeparamref name="T" />.
            </remarks>
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcResult.ToString">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.Protocol.JsonRpcResult.SetExpectedResultType(System.Type)">
            <summary>
            Provides a hint for a deferred deserialization of the <see cref="P:StreamJsonRpc.Protocol.JsonRpcResult.Result" /> value as to the type
            argument that will be used when calling <see cref="M:StreamJsonRpc.Protocol.JsonRpcResult.GetResult``1" /> later.
            </summary>
            <param name="resultType">The type that will be used as the generic type argument to <see cref="M:StreamJsonRpc.Protocol.JsonRpcResult.GetResult``1" />.</param>
        </member>
        <member name="M:StreamJsonRpc.ProxyGeneration.Get(System.Reflection.TypeInfo)">
            <summary>
            Gets a dynamically generated type that implements a given interface in terms of a <see cref="T:StreamJsonRpc.JsonRpc" /> instance.
            </summary>
            <param name="serviceInterface">The interface that describes the RPC contract, and that the client proxy should implement.</param>
            <returns>The generated type.</returns>
        </member>
        <member name="M:StreamJsonRpc.ProxyGeneration.AdaptReturnType(System.Reflection.MethodInfo,System.Boolean,System.Boolean,System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            Converts the value on the stack to one compatible with the method's return type.
            </summary>
            <param name="method">The interface method that we're generating code for.</param>
            <param name="returnTypeIsValueTask"><c>true</c> if the return type is <see cref="T:System.Threading.Tasks.ValueTask" /> or <see cref="T:System.Threading.Tasks.ValueTask`1" />; <c>false</c> otherwise.</param>
            <param name="returnTypeIsIAsyncEnumerable"><c>true</c> if the return type is <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />; <c>false</c> otherwise.</param>
            <param name="il">The IL emitter for the method.</param>
            <param name="invokingMethod">The Invoke method on <see cref="T:StreamJsonRpc.JsonRpc" /> that IL was just emitted to invoke.</param>
            <param name="cancellationTokenParameter">The <see cref="T:System.Threading.CancellationToken" /> parameter in the proxy method, if there is one.</param>
        </member>
        <member name="M:StreamJsonRpc.ProxyGeneration.GetProxyModuleBuilder(System.Reflection.TypeInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.ModuleBuilder" /> to use for generating a proxy for the given type.
            </summary>
            <param name="interfaceType">The type of the interface to generate a proxy for.</param>
            <returns>The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> to use.</returns>
        </member>
        <member name="T:StreamJsonRpc.ProxyGeneration.AsyncEnumerableProxy`1">
            <summary>
            A synthesized <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that makes a promise for such a value look like the actual value.
            </summary>
            <typeparam name="T">The type of element produced by the enumerable.</typeparam>
        </member>
        <member name="T:StreamJsonRpc.Reflection.CodeGenHelpers">
            <summary>
            Helper methods for dynamically generated proxies to invoke.
            This type is only public because mono does not support IgnoresAccessChecksToAttribute. Do not call directly.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.CodeGenHelpers.CreateAsyncEnumerableProxy``1(System.Threading.Tasks.Task{System.Collections.Generic.IAsyncEnumerable{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="T:StreamJsonRpc.ProxyGeneration.AsyncEnumerableProxy`1" />
        </member>
        <member name="T:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks">
            <summary>
            Implemented by <see cref="T:StreamJsonRpc.JsonRpc" /> to expose callbacks allowing an <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> to perform resource cleanup.
            </summary>
        </member>
        <member name="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.RequestTransmissionAborted">
            <summary>
            Occurs when <see cref="T:StreamJsonRpc.JsonRpc" /> aborts the transmission of an outbound request (that was not a notification).
            </summary>
            <remarks>
            This usually occurs because of an exception during serialization or transmission, possibly due to cancellation.
            </remarks>
        </member>
        <member name="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.ResponseReceived">
            <summary>
            Occurs when <see cref="T:StreamJsonRpc.JsonRpc" /> receives a response to a previously sent request.
            </summary>
        </member>
        <member name="E:StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.ResponseSent">
            <summary>
            Occurs when <see cref="T:StreamJsonRpc.JsonRpc" /> transmits a response message.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Reflection.IJsonRpcFormatterState">
            <summary>
            An interface implemented by <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> instances
            to support some formatter extensions such as <see cref="T:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker" />.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingMessageWithId">
            <summary>
            Gets the id of the request or response currently being serialized.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.DeserializingMessageWithId">
            <summary>
            Gets the ID of the response currently being deserialized.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingRequest">
            <summary>
            Gets a value indicating whether a <see cref="T:StreamJsonRpc.Protocol.JsonRpcRequest" /> is being serialized.
            </summary>
            <remarks>
            A response is being serialized if this property's value is <c>false</c> while <see cref="P:StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingMessageWithId" /> is non-empty.
            </remarks>
        </member>
        <member name="T:StreamJsonRpc.Reflection.IJsonRpcFormatterTracingCallbacks">
            <summary>
            Optionally implemented by a <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> when it needs the fully serialized sequence in order to trace the JSON representation of the message.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.IJsonRpcFormatterTracingCallbacks.OnSerializationComplete(StreamJsonRpc.Protocol.JsonRpcMessage,System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Invites the formatter to call <see cref="M:StreamJsonRpc.Reflection.IJsonRpcTracingCallbacks.OnMessageSerialized(StreamJsonRpc.Protocol.JsonRpcMessage,System.Object)" /> with the JSON representation of the message just serialized..
            </summary>
            <param name="message">The message that was just serialized.</param>
            <param name="encodedMessage">The encoded copy of the message, as it recently came from the <see cref="M:StreamJsonRpc.IJsonRpcMessageFormatter.Serialize(System.Buffers.IBufferWriter{System.Byte},StreamJsonRpc.Protocol.JsonRpcMessage)" /> method.</param>
        </member>
        <member name="T:StreamJsonRpc.Reflection.IJsonRpcMessageBufferManager">
            <summary>
            An interface that may be found on an <see cref="T:StreamJsonRpc.IJsonRpcMessageHandler" /> object to request notification of when
            message deserialization is completed so buffers can be released or safely recycled.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.IJsonRpcMessageBufferManager.DeserializationComplete(StreamJsonRpc.Protocol.JsonRpcMessage)">
            <summary>
            Notifies that it is safe to free buffers held to deserialize the payload for a message because all deserialization attempts are completed.
            </summary>
            <param name="message">The message whose deserialization is done.</param>
            <remarks>
            Implementations are guaranteed to be called at least once for each message when deserialization is completed.
            This method will be invoked before the next request to <see cref="M:StreamJsonRpc.IJsonRpcMessageHandler.ReadAsync(System.Threading.CancellationToken)" />.
            </remarks>
        </member>
        <member name="T:StreamJsonRpc.Reflection.IJsonRpcTracingCallbacks">
            <summary>
            An interface implemented by <see cref="T:StreamJsonRpc.JsonRpc" /> for <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> implementations to use to facilitate message tracing.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.IJsonRpcTracingCallbacks.OnMessageSerialized(StreamJsonRpc.Protocol.JsonRpcMessage,System.Object)">
            <summary>
            Occurs when the <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> has serialized a message for transmission.
            </summary>
            <param name="message">The JSON-RPC message.</param>
            <param name="encodedMessage">The encoded form of the message. Calling <see cref="M:System.Object.ToString" /> on this should produce the JSON-RPC text of the message.</param>
        </member>
        <member name="M:StreamJsonRpc.Reflection.IJsonRpcTracingCallbacks.OnMessageDeserialized(StreamJsonRpc.Protocol.JsonRpcMessage,System.Object)">
            <summary>
            Occurs when the <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> has deserialized an incoming message.
            </summary>
            <param name="message">The JSON-RPC message.</param>
            <param name="encodedMessage">The encoded form of the message. Calling <see cref="M:System.Object.ToString" /> on this should produce the JSON-RPC text of the message.</param>
        </member>
        <member name="T:StreamJsonRpc.Reflection.JsonRpcMessageEventArgs">
            <summary>
            Carries the <see cref="P:StreamJsonRpc.Reflection.JsonRpcMessageEventArgs.RequestId" /> from request or response messages.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.JsonRpcMessageEventArgs.#ctor(StreamJsonRpc.RequestId)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.JsonRpcMessageEventArgs" /> class.
            </summary>
            <param name="requestId">The ID from the request or response that the event is regarding.</param>
        </member>
        <member name="M:StreamJsonRpc.Reflection.JsonRpcMessageEventArgs.#ctor(StreamJsonRpc.Protocol.IJsonRpcMessageWithId)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.JsonRpcMessageEventArgs" /> class.
            </summary>
            <param name="message">The message the event is regarding.</param>
        </member>
        <member name="P:StreamJsonRpc.Reflection.JsonRpcMessageEventArgs.RequestId">
            <summary>
            Gets the id on the request, result or error.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Reflection.JsonRpcResponseEventArgs">
            <summary>
            Carries the <see cref="T:StreamJsonRpc.RequestId" /> and success status of response messages.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.JsonRpcResponseEventArgs.#ctor(StreamJsonRpc.RequestId,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.JsonRpcResponseEventArgs" /> class.
            </summary>
            <param name="requestId">The ID from the request or response that the event is regarding.</param>
            <param name="isSuccessfulResponse">A flag indicating whether the response is a result (as opposed to an error).</param>
        </member>
        <member name="M:StreamJsonRpc.Reflection.JsonRpcResponseEventArgs.#ctor(StreamJsonRpc.Protocol.IJsonRpcMessageWithId)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.JsonRpcResponseEventArgs" /> class.
            </summary>
            <param name="message">The message the event is regarding.</param>
        </member>
        <member name="P:StreamJsonRpc.Reflection.JsonRpcResponseEventArgs.IsSuccessfulResponse">
            <summary>
            Gets a value indicating whether the response is a result (as opposed to an error).
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker">
            <summary>
            Assists <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> implementations with supporting marshaling <see cref="T:System.IO.Pipelines.IDuplexPipe" /> over JSON-RPC.
            </summary>
            <remarks>
            Lifetime rules:
            * The <see cref="T:System.IO.Pipelines.IDuplexPipe" /> always originates on the client and passed as an argument to the server.
              Servers are not allowed to return <see cref="T:System.IO.Pipelines.IDuplexPipe" /> to clients because the server would have no feedback if the client dropped it, leaking resources.
            * The client can only send an <see cref="T:System.IO.Pipelines.IDuplexPipe" /> in a request (that expects a response).
              Notifications would not provide the client with feedback that the server dropped it, leaking resources.
            * The client will immediately terminate the <see cref="T:System.IO.Pipelines.IDuplexPipe" /> if the server returns ANY error in response to the request, since the server may not be aware of the <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            * The <see cref="T:System.IO.Pipelines.IDuplexPipe" /> will NOT be terminated when a successful response is received from the server. Client and server are expected to negotiate the end of the <see cref="T:System.IO.Pipelines.IDuplexPipe" /> themselves.
            </remarks>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.formatterState">
            <summary>
            The formatter that owns this tracker.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.outboundRequestChannelMap">
            <summary>
            A map of outbound request IDs to channels that they included.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.inboundRequestChannelMap">
            <summary>
            A map of inbound request IDs to channels that they included.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.openOutboundChannels">
            <summary>
            The set of channels that have been opened but not yet closed to support outbound requests, keyed by their ID.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.openInboundChannels">
            <summary>
            The set of channels that have been opened but not yet closed to support inbound requests, keyed by their ID.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.isDisposed">
            <summary>
            Backing field for the <see cref="P:Microsoft.IDisposableObservable.IsDisposed" /> property.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.#ctor(StreamJsonRpc.JsonRpc,StreamJsonRpc.Reflection.IJsonRpcFormatterState)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker" /> class.
            </summary>
            <param name="jsonRpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> instance that may be used to send or receive RPC messages related to <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</param>
            <param name="formatterState">The formatter that owns this tracker.</param>
        </member>
        <member name="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream">
            <summary>
            Gets or sets the multiplexing stream used to create and accept channels.
            </summary>
            <remarks>
            If this is <c>null</c>, some public methods will throw <see cref="T:System.NotSupportedException" />.
            </remarks>
        </member>
        <member name="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.Microsoft#IDisposableObservable#IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.RequestIdBeingSerialized">
            <summary>
            Gets the id of the request currently being serialized for use as a key in <see cref="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.outboundRequestChannelMap" />.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.RequestIdBeingDeserialized">
            <summary>
            Gets the ID of the request currently being deserialized for use as a key in <see cref="F:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.inboundRequestChannelMap" />.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetToken(System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Creates a token to represent an <see cref="T:System.IO.Pipelines.IDuplexPipe" /> as it is transmitted from the client to an RPC server as a method argument.
            </summary>
            <param name="duplexPipe">The client pipe that is to be shared with the RPC server. May be null.</param>
            <returns>The token to use as the RPC method argument; or <c>null</c> if <paramref name="duplexPipe" /> was <c>null</c>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if no <see cref="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream" /> was provided to the constructor or when serializing a message without an ID property.</exception>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetToken(System.IO.Pipelines.PipeReader)">
            <summary>
            Creates a token to represent a <see cref="T:System.IO.Pipelines.PipeReader" /> as it is transmitted from the client to an RPC server as a method argument.
            </summary>
            <param name="reader">The client pipe that is to be shared with the RPC server. May be null.</param>
            <returns>The token to use as the RPC method argument; or <c>null</c> if <paramref name="reader" /> was <c>null</c>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if no <see cref="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream" /> was provided to the constructor or when serializing a message without an ID property.</exception>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetToken(System.IO.Pipelines.PipeWriter)">
            <summary>
            Creates a token to represent a <see cref="T:System.IO.Pipelines.PipeWriter" /> as it is transmitted from the client to an RPC server as a method argument.
            </summary>
            <param name="writer">The client pipe that is to be shared with the RPC server. May be null.</param>
            <returns>The token to use as the RPC method argument; or <c>null</c> if <paramref name="writer" /> was <c>null</c>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if no <see cref="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream" /> was provided to the constructor or when serializing a message without an ID property.</exception>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetPipe(System.Nullable{System.Int32})">
            <summary>
            Creates an <see cref="T:System.IO.Pipelines.IDuplexPipe" /> from a given token as it is received at the RPC server as a method argument.
            </summary>
            <param name="token">The method argument, which was originally obtained by the client using the <see cref="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetToken(System.IO.Pipelines.IDuplexPipe)" /> method.</param>
            <returns>The <see cref="T:System.IO.Pipelines.IDuplexPipe" /> from the token; or <c>null</c> if <paramref name="token" /> was <c>null</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the token does not match up with an out of band channel offered by the client.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if no <see cref="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream" /> was provided to the constructor.</exception>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetPipeReader(System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:System.IO.Pipelines.PipeReader" /> from a given token as it is received at the RPC server as a method argument.
            </summary>
            <param name="token">The method argument, which was originally obtained by the client using the <see cref="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetToken(System.IO.Pipelines.IDuplexPipe)" /> method.</param>
            <returns>The <see cref="T:System.IO.Pipelines.PipeReader" /> from the token; or <c>null</c> if <paramref name="token" /> was <c>null</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the token does not match up with an out of band channel offered by the client.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if no <see cref="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream" /> was provided to the constructor.</exception>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetPipeWriter(System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:System.IO.Pipelines.PipeWriter" /> from a given token as it is received at the RPC server as a method argument.
            </summary>
            <param name="token">The method argument, which was originally obtained by the client using the <see cref="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetToken(System.IO.Pipelines.IDuplexPipe)" /> method.</param>
            <returns>The <see cref="T:System.IO.Pipelines.PipeWriter" /> from the token; or <c>null</c> if <paramref name="token" /> was <c>null</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the token does not match up with an out of band channel offered by the client.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if no <see cref="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream" /> was provided to the constructor.</exception>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.GetMultiplexingStreamOrThrow">
            <summary>
            Throws <see cref="T:System.NotSupportedException" /> if <see cref="P:StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker.MultiplexingStream" /> is <c>null</c>.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker">
            <summary>
            A helper class that <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> implementations may use to support <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> return values from RPC methods.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.TokenPropertyName">
            <summary>
            The name of the string property that carries the handle for the enumerable.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.ValuesPropertyName">
            <summary>
            The name of the JSON array property that contains the values.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.FinishedPropertyName">
            <summary>
            The name of the boolean property that indicates whether the last value has been returned to the consumer.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.generatorTokensByRequestId">
            <summary>
            Dictionary used to map the outbound request id to their progress info so that the progress objects are cleaned after getting the final response.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.#ctor(StreamJsonRpc.JsonRpc,StreamJsonRpc.Reflection.IJsonRpcFormatterState)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker" /> class.
            </summary>
            <param name="jsonRpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> instance that may be used to send or receive RPC messages related to <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</param>
            <param name="formatterState">The formatter that owns this tracker.</param>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.CanSerialize(System.Type)">
            <summary>
            Checks if a given <see cref="T:System.Type" /> implements <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </summary>
            <param name="objectType">The type which may implement <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</param>
            <returns>true if given <see cref="T:System.Type" /> implements <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />; otherwise, false.</returns>
            <devremarks>
            We use <see langword="int" /> as a generic type argument in this because what we use doesn't matter, but we must use *something*.
            </devremarks>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.CanDeserialize(System.Type)">
            <summary>
            Checks if a given <see cref="T:System.Type" /> is exactly some closed generic type based on <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </summary>
            <param name="objectType">The type which may be <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</param>
            <returns>true if given <see cref="T:System.Type" /> is <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />; otherwise, false.</returns>
            <devremarks>
            We use <see langword="int" /> as a generic type argument in this because what we use doesn't matter, but we must use *something*.
            </devremarks>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.GetToken``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Used by the generator to assign a handle to the given <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </summary>
            <typeparam name="T">The type of value that is produced by the enumerable.</typeparam>
            <param name="enumerable">The enumerable to assign a handle to.</param>
            <returns>The handle that was assigned.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.CreateEnumerableProxy``1(System.Object,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Used by the consumer to construct a proxy that implements <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            and gets all its values from a remote generator.
            </summary>
            <typeparam name="T">The type of value that is produced by the enumerable.</typeparam>
            <param name="handle">The handle specified by the generator that is used to obtain more values or dispose of the enumerator. May be <c>null</c> to indicate there will be no more values.</param>
            <param name="prefetchedItems">The list of items that are included with the enumerable handle.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.AsyncEnumerableProxy`1">
            <summary>
            Provides the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> instance that is used by a consumer.
            </summary>
            <typeparam name="T">The type of value produced by the enumerator.</typeparam>
        </member>
        <member name="T:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.AsyncEnumerableProxy`1.AsyncEnumeratorProxy">
            <summary>
            Provides the <see cref="T:System.Collections.Generic.IAsyncEnumerator`1" /> instance that is used by a consumer.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.AsyncEnumerableProxy`1.AsyncEnumeratorProxy.localCachedValues">
            <summary>
            A sequence of values that have already been received from the generator but not yet consumed.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker.AsyncEnumerableProxy`1.AsyncEnumeratorProxy.generatorReportsFinished">
            <summary>
            A value indicating whether the generator has reported that no more values will be forthcoming.
            </summary>
        </member>
        <member name="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker">
            <summary>
            Class containing useful methods to help message formatters implement support for <see cref="T:System.IProgress`1" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressRequestSpecialMethod">
            <summary>
            Special method name for progress notification.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.requestProgressMap">
            <summary>
            Dictionary used to map the outbound request id to their progress info so that the progress objects are cleaned after getting the final response.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.progressMap">
            <summary>
            Dictionary used to map progress id token to its corresponding <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> instance containing the progress object and the necessary fields to report the results.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.progressLock">
            <summary>
            Object used to lock the access to <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.requestProgressMap" /> and <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.progressMap" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.formatterState">
            <summary>
            State from the formatter that owns this tracker.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.nextProgressId">
            <summary>
            Gets or sets the the next id value to assign as token for the progress objects.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.#ctor(StreamJsonRpc.JsonRpc,StreamJsonRpc.Reflection.IJsonRpcFormatterState)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker" /> class.
            </summary>
            <param name="jsonRpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> object that ultimately owns this tracker.</param>
            <param name="formatterState">The formatter that owns this tracker.</param>
        </member>
        <member name="P:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.RequestIdBeingSerialized">
            <summary>
            Gets the id of the request currently being serialized so the converter can use it to create the request-progress map.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.FindIProgressOfT(System.Type)">
            <summary>
            Converts given <see cref="T:System.Type" /> to its <see cref="T:System.IProgress`1" /> type.
            </summary>
            <param name="objectType">The type which may implement <see cref="T:System.IProgress`1" />.</param>
            <returns>The <see cref="T:System.IProgress`1" /> from given <see cref="T:System.Type" /> object, or <c>null</c>  if no such interface was found in the given <paramref name="objectType" />.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.IsSupportedProgressType(System.Type)">
            <summary>
            Checks if a given <see cref="T:System.Type" /> implements <see cref="T:System.IProgress`1" />.
            </summary>
            <param name="objectType">The type which may implement <see cref="T:System.IProgress`1" />.</param>
            <returns>true if given <see cref="T:System.Type" /> implements <see cref="T:System.IProgress`1" />; otherwise, false.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.GetTokenForProgress(System.Object)">
            <summary>
            Gets a <see cref="T:System.Int64" /> type token to use as replacement of an <see cref="T:System.Object" /> implementing <see cref="T:System.IProgress`1" /> in the JSON message.
            </summary>
            <param name="value">The object which should implement <see cref="T:System.IProgress`1" />.</param>
            <returns>The assigned <see cref="T:System.Int64" /> typed token.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.TryGetProgressObject(System.Int64,StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation@)">
            <summary>
            Gets the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> object associated with the given progress id.
            </summary>
            <param name="progressId">The key to obtain the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> object from <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.progressMap" />.</param>
            <param name="valueType">Output parameter to store the obtained <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> object.</param>
            <returns>true if the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> object was found with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.CreateProgress``1(StreamJsonRpc.JsonRpc,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:System.IProgress`1" /> to use on the receiving end of an RPC call.
            </summary>
            <typeparam name="T">The type of the value to be reported by <see cref="T:System.IProgress`1" />.</typeparam>
            <param name="rpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> instance used to send the <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressRequestSpecialMethod" /> notification.</param>
            <param name="token">The token used to obtain the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> instance from <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.progressMap" />.</param>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.CreateProgress(StreamJsonRpc.JsonRpc,System.Object,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:System.IProgress`1" /> to use on the receiving end of an RPC call.
            </summary>
            <param name="rpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> instance used to send the <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressRequestSpecialMethod" /> notification.</param>
            <param name="token">The token used to obtain the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> instance from <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.progressMap" />.</param>
            <param name="valueType">The type that the <see cref="T:System.IProgress`1" /> intance will report.</param>
        </member>
        <member name="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation">
            <summary>
            Class used to keep relevant information of an object that implements <see cref="T:System.IProgress`1" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.reportMethod">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of <see cref="M:System.IProgress`1.Report(`0)" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.progressObject">
            <summary>
            Gets the instance of the object implementing <see cref="T:System.IProgress`1" />.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.#ctor(System.Object,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> class.
            </summary>
            <param name="progressObject">The object implementing <see cref="T:System.IProgress`1" />.</param>
            <param name="token">The token associated with this progress object.</param>
        </member>
        <member name="P:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.ValueType">
            <summary>
            Gets the actual <see cref="T:System.Type" /> reported by <see cref="T:System.IProgress`1" />.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.Token">
            <summary>
            Gets the token associated with this progress object.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.InvokeReport(System.Object)">
            <summary>
            Invokes <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.reportMethod" /> using the given typed value.
            </summary>
            <param name="typedValue">The value to be reported.</param>
        </member>
        <member name="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress`1">
            <summary>
            Class that implements <see cref="T:System.IProgress`1" /> and sends <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressRequestSpecialMethod" /> notification when reporting.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress`1.#ctor(StreamJsonRpc.JsonRpc,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress`1" /> class.
            </summary>
            <param name="rpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> instance used to send the <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressRequestSpecialMethod" /> notification.</param>
            <param name="token">The progress token used to obtain the <see cref="T:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation" /> instance from <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.progressMap" />.</param>
        </member>
        <member name="M:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress`1.Report(`0)">
            <summary>
            Send a <see cref="F:StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressRequestSpecialMethod" /> norification using the stored <see cref="T:StreamJsonRpc.JsonRpc" /> instance.
            </summary>
            <param name="value">The typed value that will be send in the notification to be reported by the original <see cref="T:System.IProgress`1" /> instance.</param>
        </member>
        <member name="T:StreamJsonRpc.Reflection.TrackerHelpers`1">
            <summary>
            Helper methods for message formatter tracker classes.
            </summary>
            <typeparam name="TInterface">A generic interface. We only need the generic type definition, but since C# doesn't let us pass in open generic types, use <see cref="T:System.Int32" /> as a generic type argument.</typeparam>
        </member>
        <member name="F:StreamJsonRpc.Reflection.TrackerHelpers`1.TypeToImplementedInterfaceMap">
            <summary>
            Dictionary to record the calculation made in <see cref="M:StreamJsonRpc.Reflection.TrackerHelpers`1.FindInterfaceImplementedBy(System.Type)" /> to obtain the <typeparamref name="TInterface" /> type from a given <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.Reflection.TrackerHelpers`1.InterfaceGenericTypeDefinition">
            <summary>
            Gets the generic type definition for whatever type parameter was given by <typeparamref name="TInterface" />.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Reflection.TrackerHelpers`1.FindInterfaceImplementedBy(System.Type)">
            <summary>
            Extracts some interface from a given <see cref="T:System.Type" />, if it is implemented.
            </summary>
            <param name="objectType">The type which may implement <typeparamref name="TInterface" />.</param>
            <returns>The <typeparamref name="TInterface" /> type from given <see cref="T:System.Type" /> object, or <c>null</c>  if no such interface was found in the given <paramref name="objectType" />.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.TrackerHelpers`1.CanSerialize(System.Type)">
            <summary>
            Checks if a given <see cref="T:System.Type" /> implements <typeparamref name="TInterface" />.
            </summary>
            <param name="objectType">The type which may implement <typeparamref name="TInterface" />.</param>
            <returns>true if given <see cref="T:System.Type" /> implements <typeparamref name="TInterface" />; otherwise, false.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.TrackerHelpers`1.CanDeserialize(System.Type)">
            <summary>
            Checks whether the given type is an interface compatible with <typeparamref name="TInterface" />.
            </summary>
            <param name="objectType">The type that may be deserialized.</param>
            <returns><c>true</c> if <paramref name="objectType" /> is a closed generic form of <typeparamref name="TInterface" />; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StreamJsonRpc.Reflection.TrackerHelpers`1.IsActualInterfaceMatch(System.Type)">
            <summary>
            Checks whether the given type is an interface compatible with <typeparamref name="TInterface" />.
            </summary>
            <param name="objectType">The type that may be deserialized.</param>
            <returns><c>true</c> if <paramref name="objectType" /> is a closed generic form of <typeparamref name="TInterface" />; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:StreamJsonRpc.JsonRpcMethodAttribute">
             <summary>
             Attribute which changes the name by which this method can be invoked over JSON-RPC.
             If applied on a method, the method's CLR name can no longer be used for remote invocation.
             </summary>
             <remarks>
             This attribute should be used when rpc message method names can be different from the actual CLR method names.
             Useful in cases where rpc message method names contain illegal characters for CLR method names, i.e. "text/OnDocumentChanged".
            
             If methods are overloaded, each overload must define its own <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" />  with all the same values.
             Conflicts will result in error being thrown during <see cref="T:StreamJsonRpc.JsonRpc" /> construction.
            
             If methods are overridden, the base class can define a <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> and derived classes will inherit the attribute.
             If derived class and base class have conflicting <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> values for a method, an error will be thrown during <see cref="T:StreamJsonRpc.JsonRpc" /> construction.
             </remarks>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> class.
            </summary>
            <param name="name">Replacement name of a method.</param>
        </member>
        <member name="M:StreamJsonRpc.JsonRpcMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> class.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcMethodAttribute.Name">
            <summary>
            Gets the public RPC name by which this method will be invoked.
            </summary>
            <value>May be <c>null</c> if the method's name has not been overridden.</value>
        </member>
        <member name="P:StreamJsonRpc.JsonRpcMethodAttribute.UseSingleObjectParameterDeserialization">
            <summary>
            Gets or sets a value indicating whether JSON-RPC named arguments should all be deserialized into this method's first parameter.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.MethodSignature.parameters">
            <summary>
            Backing field for the lazily initialized <see cref="P:StreamJsonRpc.MethodSignature.Parameters" /> property.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.MethodSignature.System#IEquatable{StreamJsonRpc#MethodSignature}#Equals(StreamJsonRpc.MethodSignature)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MethodSignature.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MethodSignature.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MethodSignature.ToString">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MethodSignatureAndTarget.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MethodSignatureAndTarget.Equals(StreamJsonRpc.MethodSignatureAndTarget)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.MethodSignatureAndTarget.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:StreamJsonRpc.TargetMethod.errorMessages">
            <summary>
            A collection of error messages. May be null until the first message is added.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.TargetMethod.ArgumentDeserializationFailures">
            <summary>
            Gets all the exceptions thrown while trying to deserialize arguments to candidate parameter types.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.TargetMethod.ToString">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.RequestId">
            <summary>
            Represents the ID of a request, whether it is a number of a string.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.RequestId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RequestId" /> struct.
            </summary>
            <param name="id">The ID of the request.</param>
        </member>
        <member name="M:StreamJsonRpc.RequestId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.RequestId" /> struct.
            </summary>
            <param name="id">The ID of the request.</param>
        </member>
        <member name="P:StreamJsonRpc.RequestId.NotSpecified">
            <summary>
            Gets an empty (absent) ID.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.RequestId.Number">
            <summary>
            Gets the ID if it is a number.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.RequestId.String">
            <summary>
            Gets the ID if it is a string.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.RequestId.IsEmpty">
            <summary>
            Gets a value indicating whether both the <see cref="P:StreamJsonRpc.RequestId.Number" /> and <see cref="P:StreamJsonRpc.RequestId.String" /> properties are uninitialized.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.RequestId.ObjectValue">
            <summary>
            Gets the ID as an object (whether it is a <see cref="T:System.Int64" />, a <see cref="T:System.String" /> or null).
            </summary>
        </member>
        <member name="P:StreamJsonRpc.RequestId.NumberIfPossibleForEvent">
            <summary>
            Gets the ID if it is a number, or -1.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.RequestId.Equals(StreamJsonRpc.RequestId)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.RequestId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.RequestId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.RequestId.ToString">
            <inheritdoc />
        </member>
        <member name="T:StreamJsonRpc.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.BothReadableWritableAreNull">
            <summary>
              Looks up a localized string similar to Both readable and writable are null..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.CancellationTokenMustBeLastParameter">
            <summary>
              Looks up a localized string similar to A CancellationToken is only allowed as the last parameter..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.CannotBeCalledAfterGetAsyncEnumerator">
            <summary>
              Looks up a localized string similar to This cannot be done after GetAsyncEnumerator has already been called..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ClientProxyTypeArgumentMustBeAnInterface">
            <summary>
              Looks up a localized string similar to "{0}" is not an interface..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ConflictingMethodAttributeValue">
            <summary>
              Looks up a localized string similar to .NET methods '{0}' and '{1}' cannot both map to the same request method name: '{2}'..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ConflictingMethodNameAttribute">
            <summary>
              Looks up a localized string similar to All overloads and overrides of the '{0}' method must share a common value for {1}.{2}..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ConflictMethodSignatureAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A method with the same name and equivalent parameters has already been registered..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ConnectionDropped">
            <summary>
              Looks up a localized string similar to The JSON-RPC connection with the remote party was lost before the request could complete..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.DroppingRequestDueToNoTargetObject">
            <summary>
              Looks up a localized string similar to Got a request to execute '{0}' but have no callback object. Dropping the request..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ElementsAlreadyPrefetched">
            <summary>
              Looks up a localized string similar to This enumeration has already prefetched elements once..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.EnumValueNotRecognized">
            <summary>
              Looks up a localized string similar to The value {0} is not among the recognized or supported members of the enum type..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ErrorWritingJsonRpcMessage">
            <summary>
              Looks up a localized string similar to Error writing JSON RPC Message: {0}: {1}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ErrorWritingJsonRpcResult">
            <summary>
              Looks up a localized string similar to Error writing JSON RPC Result: {0}: {1}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.FailureDeserializingJsonRpc">
            <summary>
              Looks up a localized string similar to Failure deserializing incoming JSON RPC '{0}': {1}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.FailureDeserializingRpcArgument">
            <summary>
              Looks up a localized string similar to Deserializing JSON-RPC argument with name "{0}" and position {1} to type "{2}" failed: {3}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.FatalExceptionWasThrown">
            <summary>
              Looks up a localized string similar to A fatal exception was thrown from the server method {0}: {1}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.FillBufferFirst">
            <summary>
              Looks up a localized string similar to The buffer is empty. Call the async method to fill it first..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.FindIProgressOfTError">
            <summary>
              Looks up a localized string similar to Unable to cast given Type to IProgress&lt;T&gt;.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.FormatterConfigurationLockedAfterJsonRpcAssigned">
            <summary>
              Looks up a localized string similar to The configuration is locked because this formatter has already been associated with a JsonRpc instance..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.HeaderContentLengthNotParseable">
            <summary>
              Looks up a localized string similar to Failed parsing Content-Length header into a positive integer..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.HeaderValueTooLarge">
            <summary>
              Looks up a localized string similar to The size of the message header exceeds the maximum supported size..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.InvalidAfterListenHasStarted">
            <summary>
              Looks up a localized string similar to This operation is not allowed after listening for messages has started..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.InvalidBeforeListenHasStarted">
            <summary>
              Looks up a localized string similar to This operation is not allowed before listening for messages has started..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.JsonRpcCannotBeNull">
            <summary>
              Looks up a localized string similar to JSON RPC must not be null..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.MarshaledObjectInNotificationError">
            <summary>
              Looks up a localized string similar to This tracked object cannot be included in a notification. Only messages including an "id" property are supported..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.MarshaledObjectInResponseOrNotificationError">
            <summary>
              Looks up a localized string similar to This tracked object should not be part of any response or notification..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.MethodHasRefOrOutParameters">
            <summary>
              Looks up a localized string similar to {0} has ref or out parameter(s), which is not supported.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.MethodParameterCountDoesNotMatch">
            <summary>
              Looks up a localized string similar to {0} parameter(s) (excluding any CancellationToken): {1}, but the request supplies {2}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.MethodParametersNotCompatible">
            <summary>
              Looks up a localized string similar to {0} parameters are not compatible with the arguments provided in the request..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.MustBeListening">
            <summary>
              Looks up a localized string similar to Listening must be started first..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.MustNotBeListening">
            <summary>
              Looks up a localized string similar to This cannot be done after listening has started..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.NonNegativeIntegerRequired">
            <summary>
              Looks up a localized string similar to A non-negative integer is required..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.NotSupportedWithoutMultiplexingStream">
            <summary>
              Looks up a localized string similar to Out of band streams/pipes are not supported in this configuration. Have you set a MultiplexingStream on the formatter?.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ParameterNotObject">
            <summary>
              Looks up a localized string similar to Parameter is not in the form of a single object.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ParameterObjectsNotSupportedInJsonRpc10">
            <summary>
              Looks up a localized string similar to JSON-RPC 1.0 does not support named arguments (parameters passed within an object). Use positional arguments (parameter arrays) or set protocol version to 2.0..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.PositiveIntegerRequired">
            <summary>
              Looks up a localized string similar to A positive integer is required..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ReachedEndOfStream">
            <summary>
              Looks up a localized string similar to Reached end of stream..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ReadingJsonRpcStreamFailed">
            <summary>
              Looks up a localized string similar to Reading JSON RPC from the stream failed with {0}: {1}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.RelayAlreadySet">
            <summary>
              Looks up a localized string similar to Relay connection has already been established..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.RequiredArgumentMissing">
            <summary>
              Looks up a localized string similar to An argument was not supplied for a required parameter..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ResponseIsNotError">
            <summary>
              Looks up a localized string similar to Response is not error..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.ResponseUnexpectedFormat">
            <summary>
              Looks up a localized string similar to Response is in an unexpected format.  Only error and result are supported: {0}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.RpcMethodNameNotFound">
            <summary>
              Looks up a localized string similar to No method by the name '{0}' is found..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.StreamDisposed">
            <summary>
              Looks up a localized string similar to Stream has been disposed.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.StreamMustBeReadable">
            <summary>
              Looks up a localized string similar to The stream must be readable..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.StreamMustBeWriteable">
            <summary>
              Looks up a localized string similar to The stream must be writeable..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.SumOfTwoParametersExceedsArrayLength">
            <summary>
              Looks up a localized string similar to The {0} and {1} parameters exceed length of array..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.TargetObjectAndMethodStaticFlagMismatch">
            <summary>
              Looks up a localized string similar to A target object should be supplied if and only if the method is not static..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.TaskNotCompleted">
            <summary>
              Looks up a localized string similar to The task is not completed..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.TaskWasCancelled">
            <summary>
              Looks up a localized string similar to The task was cancelled..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.TextEncoderNotApplicable">
            <summary>
              Looks up a localized string similar to Text encoding is not supported because the formatter "{0}" does not implement "{1}"..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnableToFindMethod">
            <summary>
              Looks up a localized string similar to Unable to find method '{0}/{1}' on {2} for the following reasons: {3}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnexpectedErrorProcessingJsonRpc">
            <summary>
              Looks up a localized string similar to Unexpected error processing JSON-RPC message: {0}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnexpectedTokenReadingHeader">
            <summary>
              Looks up a localized string similar to Unexpected token '{0}' while parsing header..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnknownTokenToMarshaledObject">
            <summary>
              Looks up a localized string similar to This remote object no longer exists..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnrecognizableMessage">
            <summary>
              Looks up a localized string similar to Unable to recognize incoming message as one the JSON-RPC 2.0 defined message types..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnrecognizedIncomingJsonRpc">
            <summary>
              Looks up a localized string similar to Incoming JSON-RPC message did not conform to a recognized pattern..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnsupportedEventHandlerTypeOnClientProxyInterface">
            <summary>
              Looks up a localized string similar to Unsupported event handler type on "{0}". Only EventHandler and EventHandler&lt;T&gt; are supported..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnsupportedGenericMethodsOnClientProxyInterface">
            <summary>
              Looks up a localized string similar to Generic methods are not supported..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnsupportedJsonRpcProtocolVersion">
            <summary>
              Looks up a localized string similar to Unsupported JSON-RPC protocol version {0}. The supported protocol versions are: {1}.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnsupportedMethodReturnTypeOnClientProxyInterface">
            <summary>
              Looks up a localized string similar to Method "{0}" has unsupported return type "{1}". Only Task-returning methods are supported..
            </summary>
        </member>
        <member name="P:StreamJsonRpc.Resources.UnsupportedPropertiesOnClientProxyInterface">
            <summary>
              Looks up a localized string similar to Properties are not supported for service interfaces..
            </summary>
        </member>
        <member name="T:StreamJsonRpc.SkipClrVisibilityChecks">
            <summary>
            Gives a dynamic assembly the ability to skip CLR visibility checks,
            allowing the assembly to access private members of another assembly.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.SkipClrVisibilityChecks.AttributeBaseClassCtor">
            <summary>
            The <see cref="M:System.Attribute.#ctor" /> constructor.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.SkipClrVisibilityChecks.AttributeUsageCtor">
            <summary>
            The <see cref="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" /> constructor.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.SkipClrVisibilityChecks.AttributeUsageAllowMultipleProperty">
            <summary>
            The <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> property.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.SkipClrVisibilityChecks.assemblyBuilder">
            <summary>
            The assembly builder that is constructing the dynamic assembly.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.SkipClrVisibilityChecks.moduleBuilder">
            <summary>
            The module builder for the default module of the <see cref="F:StreamJsonRpc.SkipClrVisibilityChecks.assemblyBuilder" />.
            This is where the special attribute will be defined.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.SkipClrVisibilityChecks.attributedAssemblyNames">
            <summary>
            The set of assemblies that already have visibility checks skipped for.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.SkipClrVisibilityChecks.magicAttributeCtor">
            <summary>
            The constructor on the special attribute to reference for each skipped assembly.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.SkipClrVisibilityChecks.#ctor(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.SkipClrVisibilityChecks" /> class.
            </summary>
            <param name="assemblyBuilder">The builder for the dynamic assembly.</param>
            <param name="moduleBuilder">The builder for the default module defined by <see cref="F:StreamJsonRpc.SkipClrVisibilityChecks.assemblyBuilder" />.</param>
        </member>
        <member name="M:StreamJsonRpc.SkipClrVisibilityChecks.GetSkipVisibilityChecksRequirements(System.Reflection.TypeInfo)">
            <summary>
            Gets the set of assemblies that a generated assembly must be granted the ability to skip visiblity checks for
            in order to access the specified type.
            </summary>
            <param name="typeInfo">The type which may be internal.</param>
            <returns>The set of names of assemblies to skip visibility checks for.</returns>
        </member>
        <member name="M:StreamJsonRpc.SkipClrVisibilityChecks.SkipVisibilityChecksFor(System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName})">
            <summary>
            Add attributes to a dynamic assembly so that the CLR will skip visibility checks
            for the assemblies with the specified names.
            </summary>
            <param name="assemblyNames">The names of the assemblies to skip visibility checks for.</param>
        </member>
        <member name="M:StreamJsonRpc.SkipClrVisibilityChecks.SkipVisibilityChecksFor(System.Reflection.AssemblyName)">
            <summary>
            Add an attribute to a dynamic assembly so that the CLR will skip visibility checks
            for the assembly with the specified name.
            </summary>
            <param name="assemblyName">The name of the assembly to skip visibility checks for.</param>
        </member>
        <member name="M:StreamJsonRpc.SkipClrVisibilityChecks.GetMagicAttributeCtor">
            <summary>
            Gets the constructor to the IgnoresAccessChecksToAttribute, generating the attribute if necessary.
            </summary>
            <returns>The constructor to the IgnoresAccessChecksToAttribute.</returns>
        </member>
        <member name="M:StreamJsonRpc.SkipClrVisibilityChecks.EmitMagicAttribute">
            <summary>
            Defines the special IgnoresAccessChecksToAttribute type in the <see cref="F:StreamJsonRpc.SkipClrVisibilityChecks.moduleBuilder" />.
            </summary>
            <returns>The generated attribute type.</returns>
        </member>
        <member name="T:StreamJsonRpc.StreamMessageHandler">
            <summary>
            An abstract base class for for sending and receiving messages over a
            reading and writing pair of <see cref="T:System.IO.Stream" /> objects.
            </summary>
        </member>
        <member name="F:StreamJsonRpc.StreamMessageHandler.disposalTokenSource">
            <summary>
            The source of a token that is canceled when this instance is disposed.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.StreamMessageHandler.#ctor(System.IO.Stream,System.IO.Stream,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.StreamMessageHandler" /> class.
            </summary>
            <param name="sendingStream">The stream used to transmit messages. May be null.</param>
            <param name="receivingStream">The stream used to receive messages. May be null.</param>
            <param name="formatter">The formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances.</param>
        </member>
        <member name="P:StreamJsonRpc.StreamMessageHandler.CanRead">
            <summary>
            Gets a value indicating whether this message handler has a receiving stream.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.StreamMessageHandler.CanWrite">
            <summary>
            Gets a value indicating whether this message handler has a sending stream.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.StreamMessageHandler.SendingStream">
            <summary>
            Gets the stream used to transmit messages. May be null.
            </summary>
        </member>
        <member name="P:StreamJsonRpc.StreamMessageHandler.ReceivingStream">
            <summary>
            Gets the stream used to receive messages. May be null.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.StreamMessageHandler.Dispose(System.Boolean)">
            <summary>
            Disposes resources allocated by this instance.
            </summary>
            <param name="disposing"><c>true</c> when being disposed; <c>false</c> when being finalized.</param>
        </member>
        <member name="M:StreamJsonRpc.StreamMessageHandler.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Calls <see cref="M:System.IO.Stream.FlushAsync" /> on the <see cref="P:StreamJsonRpc.StreamMessageHandler.SendingStream" />,
            or equivalent sending stream if using an alternate transport.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the write buffer has been transmitted.</returns>
        </member>
        <member name="P:StreamJsonRpc.Utilities.IsRunningOnMono">
            <summary>
            Gets a value indicating whether the mono runtime is executing this code.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.Utilities.ReadInt32BE(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Reads an <see cref="T:System.Int32" /> value from a buffer using big endian.
            </summary>
            <param name="sequence">The sequence of bytes to read from. Must be at least 4 bytes long.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:StreamJsonRpc.Utilities.ReadIntBE(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads an <see cref="T:System.Int32" /> value to a buffer using big endian.
            </summary>
            <param name="buffer">The buffer to read from. Must be at most 4 bytes long.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:StreamJsonRpc.Utilities.Write(System.Span{System.Byte},System.Int32)">
            <summary>
            Writes an <see cref="T:System.Int32" /> value to a buffer using big endian.
            </summary>
            <param name="buffer">The buffer to write to. Must be at least 4 bytes long.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:StreamJsonRpc.Utilities.CopyTo``1(System.Buffers.ReadOnlySequence{``0}@,System.Buffers.IBufferWriter{``0})">
            <summary>
            Copies a <see cref="T:System.Buffers.ReadOnlySequence`1" /> to an <see cref="T:System.Buffers.IBufferWriter`1" />.
            </summary>
            <typeparam name="T">The type of element to copy.</typeparam>
            <param name="sequence">The sequence to read from.</param>
            <param name="writer">The target to write to.</param>
        </member>
        <member name="T:StreamJsonRpc.WebSocketMessageHandler">
            <summary>
            A message handler for the <see cref="T:StreamJsonRpc.JsonRpc" /> class
            that uses <see cref="T:System.Net.WebSockets.WebSocket" /> as the transport.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.WebSocketMessageHandler.#ctor(System.Net.WebSockets.WebSocket)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.WebSocketMessageHandler" /> class
            that uses the <see cref="T:StreamJsonRpc.JsonMessageFormatter" /> to serialize messages as textual JSON.
            </summary>
            <param name="webSocket">
            The <see cref="T:System.Net.WebSockets.WebSocket" /> used to communicate.
            This will <em>not</em> be automatically disposed of with this <see cref="T:StreamJsonRpc.WebSocketMessageHandler" />.
            </param>
        </member>
        <member name="M:StreamJsonRpc.WebSocketMessageHandler.#ctor(System.Net.WebSockets.WebSocket,StreamJsonRpc.IJsonRpcMessageFormatter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StreamJsonRpc.WebSocketMessageHandler" /> class.
            </summary>
            <param name="webSocket">
            The <see cref="T:System.Net.WebSockets.WebSocket" /> used to communicate.
            This will <em>not</em> be automatically disposed of with this <see cref="T:StreamJsonRpc.WebSocketMessageHandler" />.
            </param>
            <param name="formatter">The formatter to use to serialize <see cref="T:StreamJsonRpc.Protocol.JsonRpcMessage" /> instances.</param>
            <param name="sizeHint">
            The size of the buffer to use for reading JSON-RPC messages.
            Messages which exceed this size will be handled properly but may require multiple I/O operations.
            </param>
        </member>
        <member name="P:StreamJsonRpc.WebSocketMessageHandler.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.WebSocketMessageHandler.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StreamJsonRpc.WebSocketMessageHandler.WebSocket">
            <summary>
            Gets the <see cref="T:System.Net.WebSockets.WebSocket" /> used to communicate.
            </summary>
        </member>
        <member name="M:StreamJsonRpc.WebSocketMessageHandler.ReadCoreAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.WebSocketMessageHandler.WriteCoreAsync(StreamJsonRpc.Protocol.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:StreamJsonRpc.WebSocketMessageHandler.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>g5rqHZfUTL7AErVi8ikM1SHd5po=</DigestValue></Reference></SignedInfo><SignatureValue>WKMkPoyXZrUorSj1aG2hOFkovrTfGqJLq6/LsIRo5Myd+iy6wkmysLJsHmdfM74xiKz20n/cqlVHJcNvlsa7bJ5dkg6LNOilGe1EcVALBlq+R/IhgyHjJVFSus2FsWJb93FpGI1tNkVwNS8Vlirc0vEU+VOCeUW7T/0EhLILTJQHKBljTPETDpriokHgOzZSOAFtqgbXHmHI63HzjFm3nzlxoe5eJZy7vO/poz5ublwoI+nl7CmyDFnophx7wN/cImEFjno+30hKmVhHIjFFw+DmQ9FhOlHI7xJwrX/Lr5D2mXWIzksOk2f84zF4qSXIncGc2EoiHkc2oZ+fj6RGJQ==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>saeJ0/an7vTtdIicnsGFx5TflhIe/TaKK/Z4TOnp1DWwm4V/b0vvHP93iFWs0mJ1QU6i81u8VjdWwnCLQ27BMyhBNgbMErp+yfcQmi8HBhyha/qllJc+4YfUXJo2EpDhjcmzn64I97JtA0raCvJY8BMlFXkXzB8fRP+wmvzhKtnFwU9y9H1Z5RJH2pd9dBBQiw6NgaxN+TRkYxvv552YqiqhIeZVjZN9yVfPyNHyHFCqyxJlBq79AoAu8NnI5mwYQSCftCs0p0lop4F6Jf94lHQQcuEEDR++u5GBrpyXmNPEYxzCIIyQnQKBDPtpl79aYWle4/jN3Tc2f3HbM96A3w==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIE3jCCA8agAwIBAgITMwAAATGN4b6nnwo14AAAAAABMTANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTkwOTA2MjA0MDA2WhcNMjAxMjA0MjA0MDA2WjCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjE0OEMtQzRCOS0yMDY2MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA44MW746WlNnuhV4MNgY8hZbuKvs8jXFCQGmtGbkkjAXvOntKezUhFewTM3cTzk9Y7ktGmX/IXwdVf4p4/EijDrtP/0sM2VT/WUCSQ0OWLf3t1uN4+5Q/J4xBoWOLu8wyJplsj1LVk2c+1ZBuRi9lWMcKd0z+bOf3N5DBDYqFp/YiUmZ1eg+/mIDvUfXzIL7YQ3m5GwxujGjDlXsGD3ZLtJ7ubl/NPJASHIrZ+JnDzLWybUeGQFwmGbHcOTt8o2rGO4+B5NKtJYveB3VoBWKwPgknL0HD12MMH2gXYyFSFVGlESd1Wmig51WsEXf3Derh0zCZTklL8V3e6prwe09aaQIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFC1z8U9/hhkUeN6Hw36S/RTKrvmaMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBAGxFjYUTibWyu6Lq9jxdFDXSk32GAl1spdfdYGtetReYauvnqwMNAlOfjvb3vaHXhwtFyjpH+zKG74+/POkWo0Ml8sYKH0d8HMSx0jkNp9wVBkn2vOt8NS2PIODI9j/ib7pE/1nqjbf6rIv0JiyGaOq4654Dt5Gv636uYyMnrh+DBi41vOsbJiBqaojbmCOXf5VHro91joUp27lIUCBcSXG2fYSO3BSso1wfJzdUxgffRotNCr1o9oIIf4lgaPomPJNpDA3nOSQcNwWC1pkQUE+PSPWFMYxFddUTfiR9DN2J9rzgIGCCSHJAUEGFDW5hgYX7RtIa736gw3Uwm+op7jQ=</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
